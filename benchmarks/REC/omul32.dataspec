sort Xbool = struct
  Xfalse
| Xtrue ;

sort Bit = struct
  x0
| x1 ;

sort Octet = struct
  buildOctet (Bit, Bit, Bit, Bit, Bit, Bit, Bit, Bit) ;

sort OctetSum = struct
  buildOctetSum (Bit, Octet) ;

sort Half = struct
  buildHalf (Octet, Octet) ;

sort HalfSum = struct
  buildHalfSum (Bit, Half) ;

sort Block = struct
  buildBlock (Octet, Octet, Octet, Octet) ;

sort BlockSum = struct
  buildBlockSum (Bit, Block) ;

sort Pair = struct
  buildPair (Block, Block) ;

map
  notBool : Xbool -> Xbool ;
  andBool : Xbool # Xbool -> Xbool ;
  orBool : Xbool # Xbool -> Xbool ;
  xorBool : Xbool # Xbool -> Xbool ;
  notBit : Bit -> Bit ;
  andBit : Bit # Bit -> Bit ;
  orBit : Bit # Bit -> Bit ;
  xorBit : Bit # Bit -> Bit ;
  eqBit : Bit # Bit -> Xbool ;
  eqOctet : Octet # Octet -> Xbool ;
  andOctet : Octet # Octet -> Octet ;
  orOctet : Octet # Octet -> Octet ;
  xorOctet : Octet # Octet -> Octet ;
  leftOctet1 : Octet -> Octet ;
  leftOctet2 : Octet -> Octet ;
  leftOctet3 : Octet -> Octet ;
  leftOctet4 : Octet -> Octet ;
  leftOctet5 : Octet -> Octet ;
  leftOctet6 : Octet -> Octet ;
  leftOctet7 : Octet -> Octet ;
  rightOctet1 : Octet -> Octet ;
  rightOctet2 : Octet -> Octet ;
  rightOctet3 : Octet -> Octet ;
  rightOctet4 : Octet -> Octet ;
  rightOctet5 : Octet -> Octet ;
  rightOctet6 : Octet -> Octet ;
  rightOctet7 : Octet -> Octet ;
  x00 : Octet ;
  x01 : Octet ;
  x02 : Octet ;
  x03 : Octet ;
  x04 : Octet ;
  x05 : Octet ;
  x06 : Octet ;
  x07 : Octet ;
  x08 : Octet ;
  x09 : Octet ;
  x0A : Octet ;
  x0B : Octet ;
  x0C : Octet ;
  x0D : Octet ;
  x0E : Octet ;
  x0F : Octet ;
  x10 : Octet ;
  x11 : Octet ;
  x12 : Octet ;
  x13 : Octet ;
  x14 : Octet ;
  x15 : Octet ;
  x16 : Octet ;
  x17 : Octet ;
  x18 : Octet ;
  x1A : Octet ;
  x1B : Octet ;
  x1C : Octet ;
  x1D : Octet ;
  x1E : Octet ;
  x1F : Octet ;
  x20 : Octet ;
  x21 : Octet ;
  x23 : Octet ;
  x24 : Octet ;
  x25 : Octet ;
  x26 : Octet ;
  x27 : Octet ;
  x28 : Octet ;
  x29 : Octet ;
  x2A : Octet ;
  x2B : Octet ;
  x2D : Octet ;
  x2E : Octet ;
  x2F : Octet ;
  x30 : Octet ;
  x31 : Octet ;
  x32 : Octet ;
  x33 : Octet ;
  x34 : Octet ;
  x35 : Octet ;
  x36 : Octet ;
  x37 : Octet ;
  x38 : Octet ;
  x39 : Octet ;
  x3A : Octet ;
  x3B : Octet ;
  x3C : Octet ;
  x3D : Octet ;
  x3F : Octet ;
  x40 : Octet ;
  x46 : Octet ;
  x48 : Octet ;
  x49 : Octet ;
  x4A : Octet ;
  x4B : Octet ;
  x4C : Octet ;
  x4D : Octet ;
  x4E : Octet ;
  x4F : Octet ;
  x50 : Octet ;
  x51 : Octet ;
  x53 : Octet ;
  x54 : Octet ;
  x55 : Octet ;
  x58 : Octet ;
  x5A : Octet ;
  x5B : Octet ;
  x5C : Octet ;
  x5D : Octet ;
  x5E : Octet ;
  x5F : Octet ;
  x60 : Octet ;
  x61 : Octet ;
  x62 : Octet ;
  x63 : Octet ;
  x64 : Octet ;
  x65 : Octet ;
  x66 : Octet ;
  x67 : Octet ;
  x69 : Octet ;
  x6A : Octet ;
  x6B : Octet ;
  x6C : Octet ;
  x6D : Octet ;
  x6E : Octet ;
  x6F : Octet ;
  x70 : Octet ;
  x71 : Octet ;
  x72 : Octet ;
  x73 : Octet ;
  x74 : Octet ;
  x75 : Octet ;
  x76 : Octet ;
  x77 : Octet ;
  x78 : Octet ;
  x79 : Octet ;
  x7A : Octet ;
  x7B : Octet ;
  x7C : Octet ;
  x7D : Octet ;
  x7E : Octet ;
  x7F : Octet ;
  x80 : Octet ;
  x81 : Octet ;
  x83 : Octet ;
  x84 : Octet ;
  x85 : Octet ;
  x86 : Octet ;
  x88 : Octet ;
  x89 : Octet ;
  x8A : Octet ;
  x8C : Octet ;
  x8D : Octet ;
  x8E : Octet ;
  x8F : Octet ;
  x90 : Octet ;
  x91 : Octet ;
  x92 : Octet ;
  x93 : Octet ;
  x95 : Octet ;
  x96 : Octet ;
  x97 : Octet ;
  x98 : Octet ;
  x99 : Octet ;
  x9A : Octet ;
  x9B : Octet ;
  x9C : Octet ;
  x9D : Octet ;
  x9E : Octet ;
  x9F : Octet ;
  xA0 : Octet ;
  xA1 : Octet ;
  xA2 : Octet ;
  xA3 : Octet ;
  xA4 : Octet ;
  xA5 : Octet ;
  xA6 : Octet ;
  xA7 : Octet ;
  xA8 : Octet ;
  xA9 : Octet ;
  xAA : Octet ;
  xAB : Octet ;
  xAC : Octet ;
  xAE : Octet ;
  xAF : Octet ;
  xB0 : Octet ;
  xB1 : Octet ;
  xB2 : Octet ;
  xB3 : Octet ;
  xB5 : Octet ;
  xB6 : Octet ;
  xB8 : Octet ;
  xB9 : Octet ;
  xBA : Octet ;
  xBB : Octet ;
  xBC : Octet ;
  xBE : Octet ;
  xBF : Octet ;
  xC0 : Octet ;
  xC1 : Octet ;
  xC2 : Octet ;
  xC4 : Octet ;
  xC5 : Octet ;
  xC6 : Octet ;
  xC7 : Octet ;
  xC8 : Octet ;
  xC9 : Octet ;
  xCA : Octet ;
  xCB : Octet ;
  xCC : Octet ;
  xCD : Octet ;
  xCE : Octet ;
  xD0 : Octet ;
  xD1 : Octet ;
  xD2 : Octet ;
  xD3 : Octet ;
  xD4 : Octet ;
  xD5 : Octet ;
  xD6 : Octet ;
  xD7 : Octet ;
  xD8 : Octet ;
  xD9 : Octet ;
  xDB : Octet ;
  xDC : Octet ;
  xDD : Octet ;
  xDE : Octet ;
  xDF : Octet ;
  xE0 : Octet ;
  xE1 : Octet ;
  xE3 : Octet ;
  xE6 : Octet ;
  xE8 : Octet ;
  xE9 : Octet ;
  xEA : Octet ;
  xEB : Octet ;
  xEC : Octet ;
  xED : Octet ;
  xEE : Octet ;
  xEF : Octet ;
  xF0 : Octet ;
  xF1 : Octet ;
  xF2 : Octet ;
  xF3 : Octet ;
  xF4 : Octet ;
  xF5 : Octet ;
  xF6 : Octet ;
  xF7 : Octet ;
  xF8 : Octet ;
  xF9 : Octet ;
  xFA : Octet ;
  xFB : Octet ;
  xFC : Octet ;
  xFD : Octet ;
  xFE : Octet ;
  xFF : Octet ;
  eqOctetSum : OctetSum # OctetSum -> Xbool ;
  addBit : Bit # Bit # Bit -> Bit ;
  carBit : Bit # Bit # Bit -> Bit ;
  addOctetSum : Octet # Octet # Bit -> OctetSum ;
  addOctet8 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet7 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet6 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet5 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet4 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet3 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet2 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet1 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet0 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  dropCarryOctetSum : OctetSum -> Octet ;
  addOctet : Octet # Octet -> Octet ;
  eqHalf : Half # Half -> Xbool ;
  x0000 : Half ;
  x0001 : Half ;
  mulOctet : Octet # Octet -> Half ;
  mulOctet1 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet2 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet3 : Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet4 : Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet5 : Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet6 : Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet7 : Bit # Bit # Octet # Half -> Half ;
  mulOctet8 : Bit # Octet # Half -> Half ;
  mulOctetA : Half # Octet # Octet -> Half ;
  mulOctetB : Octet # OctetSum -> Half ;
  eqHalfSum : HalfSum # HalfSum -> Xbool ;
  addHalfSum : Half # Half -> HalfSum ;
  addHalf2 : Octet # Octet # Octet # Octet -> HalfSum ;
  addHalf1 : Octet # Octet # OctetSum -> HalfSum ;
  addHalf0 : OctetSum # Octet -> HalfSum ;
  dropCarryHalfSum : HalfSum -> Half ;
  addHalf : Half # Half -> Half ;
  addHalfOctet : Octet # Half -> Half ;
  addHalfOctets : Octet # Octet -> Half ;
  eqBlock : Block # Block -> Xbool ;
  andBlock : Block # Block -> Block ;
  orBlock : Block # Block -> Block ;
  xorBlock : Block # Block -> Block ;
  HalfU : Block -> Half ;
  HalfL : Block -> Half ;
  mulHalf : Half # Half -> Block ;
  mulHalfA : Half # Half # Half # Half -> Block ;
  mulHalf4 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> Block ;
  mulHalf3 : Octet # Octet # Octet # Octet # Half # Octet -> Block ;
  mulHalf2 : Octet # Half # Octet # Octet -> Block ;
  mulHalf1 : Half # Octet # Octet # Octet -> Block ;
  eqBlockSum : BlockSum # BlockSum -> Xbool ;
  addBlockSum : Block # Block -> BlockSum ;
  addBlock4 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> BlockSum ;
  addBlock3 : Octet # Octet # Octet # Octet # Octet # Octet # OctetSum -> BlockSum ;
  addBlock2 : Octet # Octet # Octet # Octet # OctetSum # Octet -> BlockSum ;
  addBlock1 : Octet # Octet # OctetSum # Octet # Octet -> BlockSum ;
  addBlock0 : OctetSum # Octet # Octet # Octet -> BlockSum ;
  dropCarryBlockSum : BlockSum -> Block ;
  addBlock : Block # Block -> Block ;
  addBlockHalf : Half # Block -> Block ;
  addBlockHalves : Half # Half -> Block ;
  eqPair : Pair # Pair -> Xbool ;
  mulBlock : Block # Block -> Pair ;
  mulBlockA : Block # Block # Block # Block -> Pair ;
  mulBlock4 : Half # Half # Half # Half # Half # Half # Half # Half -> Pair ;
  mulBlock3 : Half # Half # Half # Half # Block # Half -> Pair ;
  mulBlock2 : Half # Block # Half # Half -> Pair ;
  mulBlock1 : Block # Half # Half # Half -> Pair ;
  mulBlockB : Half # Half # Half # Half -> Pair ;
  omulBlock : Block # Block -> Pair ;
  omulBlock0 : Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half # Half -> Pair ;
  omulBlock8 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> Pair ;
  omulBlock7 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Half # Octet -> Pair ;
  omulBlock6 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Half # Octet # Octet -> Pair ;
  omulBlock5 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Half # Octet # Octet # Octet -> Pair ;
  omulBlock4 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Half # Octet # Octet # Octet # Octet -> Pair ;
  omulBlock3 : Octet # Octet # Octet # Octet # Half # Octet # Octet # Octet # Octet # Octet -> Pair ;
  omulBlock2 : Octet # Half # Octet # Octet # Octet # Octet # Octet # Octet -> Pair ;
  omulBlock1 : Half # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> Pair ;
  testMulBlock : Block # Block # Block # Block -> Xbool ;
var
  L : Xbool ;
  B : Bit ;
  B1, B2, B3, B4, B5, B6, B7, B8, B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8 : Bit ;
  B_prime, Bcarry : Bit ;
  B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8 : Bit ;
  O, O_prime : Octet ;
  O1, O2, O_prime1, O_prime2 : Octet ;
  H : Half ;
  O_second1, O_second2 : Octet ;
  H_prime : Half ;
  O3, O4, O_prime3, O_prime4, O_second3, O_second4 : Octet ;
  O11L, O11U, O12L, O12U, O21L, O21U, O22L, O22U, Ocarry : Octet ;
  W, W_prime : Block ;
  O1U, O1L, O2U, O2L, O3U, O3L, O4U, O4L : Octet ;
  H_second1, H_second2, H_second3, H_second4, H11L, H11U, H12L, H12U, H21L, H21U, H22L, H22U, Hcarry : Half ;
  W1, W2, W_prime1, W_prime2, W11, W12, W21, W22 : Block ;
  O5, O6, O7, O8 : Octet ;
  O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O34low, O41high, O41low, O42high, O42low, O43high, O43low, O44high, O44low : Octet ;
eqn
  notBool (Xfalse) = Xtrue ;
  notBool (Xtrue) = Xfalse ;
  andBool (Xfalse, L) = Xfalse ;
  andBool (Xtrue, L) = L ;
  orBool (Xfalse, L) = L ;
  orBool (Xtrue, L) = Xtrue ;
  xorBool (Xfalse, L) = L ;
  xorBool (Xtrue, L) = notBool (L) ;
  notBit (x0) = x1 ;
  notBit (x1) = x0 ;
  andBit (B, x0) = x0 ;
  andBit (B, x1) = B ;
  orBit (B, x0) = B ;
  orBit (B, x1) = x1 ;
  xorBit (B, x0) = B ;
  xorBit (B, x1) = notBit (B) ;
  eqBit (x0, x0) = Xtrue ;
  eqBit (x0, x1) = Xfalse ;
  eqBit (x1, x0) = Xfalse ;
  eqBit (x1, x1) = Xtrue ;
  eqOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = andBool (eqBit (B1, B_prime1), andBool (eqBit (B2, B_prime2), andBool (eqBit (B3, B_prime3), andBool (eqBit (B4, B_prime4), andBool (eqBit (B5, B_prime5), andBool (eqBit (B6, B_prime6), andBool (eqBit (B7, B_prime7), eqBit (B8, B_prime8)))))))) ;
  andOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (andBit (B1, B_prime1), andBit (B2, B_prime2), andBit (B3, B_prime3), andBit (B4, B_prime4), andBit (B5, B_prime5), andBit (B6, B_prime6), andBit (B7, B_prime7), andBit (B8, B_prime8)) ;
  orOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (orBit (B1, B_prime1), orBit (B2, B_prime2), orBit (B3, B_prime3), orBit (B4, B_prime4), orBit (B5, B_prime5), orBit (B6, B_prime6), orBit (B7, B_prime7), orBit (B8, B_prime8)) ;
  xorOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (xorBit (B1, B_prime1), xorBit (B2, B_prime2), xorBit (B3, B_prime3), xorBit (B4, B_prime4), xorBit (B5, B_prime5), xorBit (B6, B_prime6), xorBit (B7, B_prime7), xorBit (B8, B_prime8)) ;
  leftOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B2, B3, B4, B5, B6, B7, B8, x0) ;
  leftOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B3, B4, B5, B6, B7, B8, x0, x0) ;
  leftOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B4, B5, B6, B7, B8, x0, x0, x0) ;
  leftOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B5, B6, B7, B8, x0, x0, x0, x0) ;
  leftOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B6, B7, B8, x0, x0, x0, x0, x0) ;
  leftOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B7, B8, x0, x0, x0, x0, x0, x0) ;
  leftOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B8, x0, x0, x0, x0, x0, x0, x0) ;
  rightOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, B1, B2, B3, B4, B5, B6, B7) ;
  rightOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, B1, B2, B3, B4, B5, B6) ;
  rightOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, B1, B2, B3, B4, B5) ;
  rightOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, B1, B2, B3, B4) ;
  rightOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, B1, B2, B3) ;
  rightOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, x0, B1, B2) ;
  rightOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, x0, x0, B1) ;
  x00 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x0) ;
  x01 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x1) ;
  x02 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x0) ;
  x03 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x1) ;
  x04 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x0) ;
  x05 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x1) ;
  x06 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x0) ;
  x07 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x1) ;
  x08 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x0) ;
  x09 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x1) ;
  x0A = buildOctet (x0, x0, x0, x0, x1, x0, x1, x0) ;
  x0B = buildOctet (x0, x0, x0, x0, x1, x0, x1, x1) ;
  x0C = buildOctet (x0, x0, x0, x0, x1, x1, x0, x0) ;
  x0D = buildOctet (x0, x0, x0, x0, x1, x1, x0, x1) ;
  x0E = buildOctet (x0, x0, x0, x0, x1, x1, x1, x0) ;
  x0F = buildOctet (x0, x0, x0, x0, x1, x1, x1, x1) ;
  x10 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x0) ;
  x11 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x1) ;
  x12 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x0) ;
  x13 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x1) ;
  x14 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x0) ;
  x15 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x1) ;
  x16 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x0) ;
  x17 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x1) ;
  x18 = buildOctet (x0, x0, x0, x1, x1, x0, x0, x0) ;
  x1A = buildOctet (x0, x0, x0, x1, x1, x0, x1, x0) ;
  x1B = buildOctet (x0, x0, x0, x1, x1, x0, x1, x1) ;
  x1C = buildOctet (x0, x0, x0, x1, x1, x1, x0, x0) ;
  x1D = buildOctet (x0, x0, x0, x1, x1, x1, x0, x1) ;
  x1E = buildOctet (x0, x0, x0, x1, x1, x1, x1, x0) ;
  x1F = buildOctet (x0, x0, x0, x1, x1, x1, x1, x1) ;
  x20 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x0) ;
  x21 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x1) ;
  x23 = buildOctet (x0, x0, x1, x0, x0, x0, x1, x1) ;
  x24 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x0) ;
  x25 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x1) ;
  x26 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x0) ;
  x27 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x1) ;
  x28 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x0) ;
  x29 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x1) ;
  x2A = buildOctet (x0, x0, x1, x0, x1, x0, x1, x0) ;
  x2B = buildOctet (x0, x0, x1, x0, x1, x0, x1, x1) ;
  x2D = buildOctet (x0, x0, x1, x0, x1, x1, x0, x1) ;
  x2E = buildOctet (x0, x0, x1, x0, x1, x1, x1, x0) ;
  x2F = buildOctet (x0, x0, x1, x0, x1, x1, x1, x1) ;
  x30 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x0) ;
  x31 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x1) ;
  x32 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x0) ;
  x33 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x1) ;
  x34 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x0) ;
  x35 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x1) ;
  x36 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x0) ;
  x37 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x1) ;
  x38 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x0) ;
  x39 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x1) ;
  x3A = buildOctet (x0, x0, x1, x1, x1, x0, x1, x0) ;
  x3B = buildOctet (x0, x0, x1, x1, x1, x0, x1, x1) ;
  x3D = buildOctet (x0, x0, x1, x1, x1, x1, x0, x1) ;
  x3C = buildOctet (x0, x0, x1, x1, x1, x1, x0, x0) ;
  x3F = buildOctet (x0, x0, x1, x1, x1, x1, x1, x1) ;
  x40 = buildOctet (x0, x1, x0, x0, x0, x0, x0, x0) ;
  x46 = buildOctet (x0, x1, x0, x0, x0, x1, x1, x0) ;
  x48 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x0) ;
  x49 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x1) ;
  x4A = buildOctet (x0, x1, x0, x0, x1, x0, x1, x0) ;
  x4B = buildOctet (x0, x1, x0, x0, x1, x0, x1, x1) ;
  x4C = buildOctet (x0, x1, x0, x0, x1, x1, x0, x0) ;
  x4D = buildOctet (x0, x1, x0, x0, x1, x1, x0, x1) ;
  x4E = buildOctet (x0, x1, x0, x0, x1, x1, x1, x0) ;
  x4F = buildOctet (x0, x1, x0, x0, x1, x1, x1, x1) ;
  x50 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x0) ;
  x51 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x1) ;
  x53 = buildOctet (x0, x1, x0, x1, x0, x0, x1, x1) ;
  x54 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x0) ;
  x55 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x1) ;
  x58 = buildOctet (x0, x1, x0, x1, x1, x0, x0, x0) ;
  x5A = buildOctet (x0, x1, x0, x1, x1, x0, x1, x0) ;
  x5B = buildOctet (x0, x1, x0, x1, x1, x0, x1, x1) ;
  x5C = buildOctet (x0, x1, x0, x1, x1, x1, x0, x0) ;
  x5D = buildOctet (x0, x1, x0, x1, x1, x1, x0, x1) ;
  x5E = buildOctet (x0, x1, x0, x1, x1, x1, x1, x0) ;
  x5F = buildOctet (x0, x1, x0, x1, x1, x1, x1, x1) ;
  x60 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x0) ;
  x61 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x1) ;
  x62 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x0) ;
  x63 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x1) ;
  x64 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x0) ;
  x65 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x1) ;
  x66 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x0) ;
  x67 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x1) ;
  x69 = buildOctet (x0, x1, x1, x0, x1, x0, x0, x1) ;
  x6A = buildOctet (x0, x1, x1, x0, x1, x0, x1, x0) ;
  x6B = buildOctet (x0, x1, x1, x0, x1, x0, x1, x1) ;
  x6C = buildOctet (x0, x1, x1, x0, x1, x1, x0, x0) ;
  x6D = buildOctet (x0, x1, x1, x0, x1, x1, x0, x1) ;
  x6E = buildOctet (x0, x1, x1, x0, x1, x1, x1, x0) ;
  x6F = buildOctet (x0, x1, x1, x0, x1, x1, x1, x1) ;
  x70 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x0) ;
  x71 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x1) ;
  x72 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x0) ;
  x73 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x1) ;
  x74 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x0) ;
  x75 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x1) ;
  x76 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x0) ;
  x77 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x1) ;
  x78 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x0) ;
  x79 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x1) ;
  x7A = buildOctet (x0, x1, x1, x1, x1, x0, x1, x0) ;
  x7B = buildOctet (x0, x1, x1, x1, x1, x0, x1, x1) ;
  x7C = buildOctet (x0, x1, x1, x1, x1, x1, x0, x0) ;
  x7D = buildOctet (x0, x1, x1, x1, x1, x1, x0, x1) ;
  x7E = buildOctet (x0, x1, x1, x1, x1, x1, x1, x0) ;
  x7F = buildOctet (x0, x1, x1, x1, x1, x1, x1, x1) ;
  x80 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x0) ;
  x81 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x1) ;
  x83 = buildOctet (x1, x0, x0, x0, x0, x0, x1, x1) ;
  x84 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x0) ;
  x85 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x1) ;
  x86 = buildOctet (x1, x0, x0, x0, x0, x1, x1, x0) ;
  x88 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x0) ;
  x89 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x1) ;
  x8A = buildOctet (x1, x0, x0, x0, x1, x0, x1, x0) ;
  x8C = buildOctet (x1, x0, x0, x0, x1, x1, x0, x0) ;
  x8D = buildOctet (x1, x0, x0, x0, x1, x1, x0, x1) ;
  x8E = buildOctet (x1, x0, x0, x0, x1, x1, x1, x0) ;
  x8F = buildOctet (x1, x0, x0, x0, x1, x1, x1, x1) ;
  x90 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x0) ;
  x91 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x1) ;
  x92 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x0) ;
  x93 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x1) ;
  x95 = buildOctet (x1, x0, x0, x1, x0, x1, x0, x1) ;
  x96 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x0) ;
  x97 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x1) ;
  x98 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x0) ;
  x99 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x1) ;
  x9A = buildOctet (x1, x0, x0, x1, x1, x0, x1, x0) ;
  x9B = buildOctet (x1, x0, x0, x1, x1, x0, x1, x1) ;
  x9C = buildOctet (x1, x0, x0, x1, x1, x1, x0, x0) ;
  x9D = buildOctet (x1, x0, x0, x1, x1, x1, x0, x1) ;
  x9E = buildOctet (x1, x0, x0, x1, x1, x1, x1, x0) ;
  x9F = buildOctet (x1, x0, x0, x1, x1, x1, x1, x1) ;
  xA1 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x1) ;
  xA0 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x0) ;
  xA2 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x0) ;
  xA3 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x1) ;
  xA4 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x0) ;
  xA5 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x1) ;
  xA6 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x0) ;
  xA7 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x1) ;
  xA8 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x0) ;
  xA9 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x1) ;
  xAA = buildOctet (x1, x0, x1, x0, x1, x0, x1, x0) ;
  xAB = buildOctet (x1, x0, x1, x0, x1, x0, x1, x1) ;
  xAC = buildOctet (x1, x0, x1, x0, x1, x1, x0, x0) ;
  xAE = buildOctet (x1, x0, x1, x0, x1, x1, x1, x0) ;
  xAF = buildOctet (x1, x0, x1, x0, x1, x1, x1, x1) ;
  xB0 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x0) ;
  xB1 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x1) ;
  xB2 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x0) ;
  xB3 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x1) ;
  xB5 = buildOctet (x1, x0, x1, x1, x0, x1, x0, x1) ;
  xB6 = buildOctet (x1, x0, x1, x1, x0, x1, x1, x0) ;
  xB8 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x0) ;
  xB9 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x1) ;
  xBA = buildOctet (x1, x0, x1, x1, x1, x0, x1, x0) ;
  xBB = buildOctet (x1, x0, x1, x1, x1, x0, x1, x1) ;
  xBC = buildOctet (x1, x0, x1, x1, x1, x1, x0, x0) ;
  xBE = buildOctet (x1, x0, x1, x1, x1, x1, x1, x0) ;
  xBF = buildOctet (x1, x0, x1, x1, x1, x1, x1, x1) ;
  xC0 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x0) ;
  xC1 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x1) ;
  xC2 = buildOctet (x1, x1, x0, x0, x0, x0, x1, x0) ;
  xC4 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x0) ;
  xC5 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x1) ;
  xC6 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x0) ;
  xC7 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x1) ;
  xC8 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x0) ;
  xC9 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x1) ;
  xCA = buildOctet (x1, x1, x0, x0, x1, x0, x1, x0) ;
  xCB = buildOctet (x1, x1, x0, x0, x1, x0, x1, x1) ;
  xCC = buildOctet (x1, x1, x0, x0, x1, x1, x0, x0) ;
  xCD = buildOctet (x1, x1, x0, x0, x1, x1, x0, x1) ;
  xCE = buildOctet (x1, x1, x0, x0, x1, x1, x1, x0) ;
  xD0 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x0) ;
  xD1 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x1) ;
  xD2 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x0) ;
  xD3 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x1) ;
  xD4 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x0) ;
  xD5 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x1) ;
  xD6 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x0) ;
  xD7 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x1) ;
  xD8 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x0) ;
  xD9 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x1) ;
  xDB = buildOctet (x1, x1, x0, x1, x1, x0, x1, x1) ;
  xDC = buildOctet (x1, x1, x0, x1, x1, x1, x0, x0) ;
  xDD = buildOctet (x1, x1, x0, x1, x1, x1, x0, x1) ;
  xDE = buildOctet (x1, x1, x0, x1, x1, x1, x1, x0) ;
  xDF = buildOctet (x1, x1, x0, x1, x1, x1, x1, x1) ;
  xE0 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x0) ;
  xE1 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x1) ;
  xE3 = buildOctet (x1, x1, x1, x0, x0, x0, x1, x1) ;
  xE6 = buildOctet (x1, x1, x1, x0, x0, x1, x1, x0) ;
  xE8 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x0) ;
  xE9 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x1) ;
  xEA = buildOctet (x1, x1, x1, x0, x1, x0, x1, x0) ;
  xEB = buildOctet (x1, x1, x1, x0, x1, x0, x1, x1) ;
  xEC = buildOctet (x1, x1, x1, x0, x1, x1, x0, x0) ;
  xED = buildOctet (x1, x1, x1, x0, x1, x1, x0, x1) ;
  xEE = buildOctet (x1, x1, x1, x0, x1, x1, x1, x0) ;
  xEF = buildOctet (x1, x1, x1, x0, x1, x1, x1, x1) ;
  xF0 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x0) ;
  xF1 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x1) ;
  xF2 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x0) ;
  xF3 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x1) ;
  xF4 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x0) ;
  xF5 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x1) ;
  xF6 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x0) ;
  xF7 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x1) ;
  xF8 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x0) ;
  xF9 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x1) ;
  xFA = buildOctet (x1, x1, x1, x1, x1, x0, x1, x0) ;
  xFB = buildOctet (x1, x1, x1, x1, x1, x0, x1, x1) ;
  xFC = buildOctet (x1, x1, x1, x1, x1, x1, x0, x0) ;
  xFD = buildOctet (x1, x1, x1, x1, x1, x1, x0, x1) ;
  xFE = buildOctet (x1, x1, x1, x1, x1, x1, x1, x0) ;
  xFF = buildOctet (x1, x1, x1, x1, x1, x1, x1, x1) ;
  eqOctetSum (buildOctetSum (B, O), buildOctetSum (B_prime, O_prime)) = andBool (eqBit (B, B_prime), eqOctet (O, O_prime)) ;
  addBit (B, B_prime, Bcarry) = xorBit (xorBit (B, B_prime), Bcarry) ;
  carBit (B, B_prime, Bcarry) = orBit (andBit (andBit (B, B_prime), notBit (Bcarry)), andBit (orBit (B, B_prime), Bcarry)) ;
  addOctetSum (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8), Bcarry) = addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) ;
  addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) = addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, carBit (B8, B_prime8, Bcarry), addBit (B8, B_prime8, Bcarry)) ;
  addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, Bcarry, B_second8) = addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, carBit (B7, B_prime7, Bcarry), addBit (B7, B_prime7, Bcarry), B_second8) ;
  addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, Bcarry, B_second7, B_second8) = addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, carBit (B6, B_prime6, Bcarry), addBit (B6, B_prime6, Bcarry), B_second7, B_second8) ;
  addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, Bcarry, B_second6, B_second7, B_second8) = addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, carBit (B5, B_prime5, Bcarry), addBit (B5, B_prime5, Bcarry), B_second6, B_second7, B_second8) ;
  addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, Bcarry, B_second5, B_second6, B_second7, B_second8) = addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, carBit (B4, B_prime4, Bcarry), addBit (B4, B_prime4, Bcarry), B_second5, B_second6, B_second7, B_second8) ;
  addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, Bcarry, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet2 (B1, B_prime1, B2, B_prime2, carBit (B3, B_prime3, Bcarry), addBit (B3, B_prime3, Bcarry), B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet2 (B1, B_prime1, B2, B_prime2, Bcarry, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet1 (B1, B_prime1, carBit (B2, B_prime2, Bcarry), addBit (B2, B_prime2, Bcarry), B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet1 (B1, B_prime1, Bcarry, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet0 (carBit (B1, B_prime1, Bcarry), addBit (B1, B_prime1, Bcarry), B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet0 (Bcarry, B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = buildOctetSum (Bcarry, buildOctet (B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)) ;
  dropCarryOctetSum (buildOctetSum (Bcarry, O)) = O ;
  addOctet (O, O_prime) = dropCarryOctetSum (addOctetSum (O, O_prime, x0)) ;
  eqHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)) ;
  x0000 = buildHalf (x00, x00) ;
  x0001 = buildHalf (x00, x01) ;
  mulOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), O_prime) = mulOctet1 (B1, B2, B3, B4, B5, B6, B7, B8, O_prime, x0000) ;
  mulOctet1 (x0, B2, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet1 (x1, B2, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet1 (O_prime), leftOctet7 (O_prime))) ;
  mulOctet2 (x0, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet2 (x1, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet2 (O_prime), leftOctet6 (O_prime))) ;
  mulOctet3 (x0, B4, B5, B6, B7, B8, O_prime, H) = mulOctet4 (B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet3 (x1, B4, B5, B6, B7, B8, O_prime, H) = mulOctet4 (B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet3 (O_prime), leftOctet5 (O_prime))) ;
  mulOctet4 (x0, B5, B6, B7, B8, O_prime, H) = mulOctet5 (B5, B6, B7, B8, O_prime, H) ;
  mulOctet4 (x1, B5, B6, B7, B8, O_prime, H) = mulOctet5 (B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet4 (O_prime), leftOctet4 (O_prime))) ;
  mulOctet5 (x0, B6, B7, B8, O_prime, H) = mulOctet6 (B6, B7, B8, O_prime, H) ;
  mulOctet5 (x1, B6, B7, B8, O_prime, H) = mulOctet6 (B6, B7, B8, O_prime, mulOctetA (H, rightOctet5 (O_prime), leftOctet3 (O_prime))) ;
  mulOctet6 (x0, B7, B8, O_prime, H) = mulOctet7 (B7, B8, O_prime, H) ;
  mulOctet6 (x1, B7, B8, O_prime, H) = mulOctet7 (B7, B8, O_prime, mulOctetA (H, rightOctet6 (O_prime), leftOctet2 (O_prime))) ;
  mulOctet7 (x0, B8, O_prime, H) = mulOctet8 (B8, O_prime, H) ;
  mulOctet7 (x1, B8, O_prime, H) = mulOctet8 (B8, O_prime, mulOctetA (H, rightOctet7 (O_prime), leftOctet1 (O_prime))) ;
  mulOctet8 (x0, O_prime, H) = H ;
  mulOctet8 (x1, O_prime, H) = mulOctetA (H, x00, O_prime) ;
  mulOctetA (buildHalf (O1, O2), O_prime1, O_prime2) = mulOctetB (addOctet (O1, O_prime1), addOctetSum (O2, O_prime2, x0)) ;
  mulOctetB (O1, buildOctetSum (x0, O2)) = buildHalf (O1, O2) ;
  mulOctetB (O1, buildOctetSum (x1, O2)) = buildHalf (addOctet (O1, x01), O2) ;
  eqHalfSum (buildHalfSum (B, H), buildHalfSum (B_prime, H_prime)) = andBool (eqBit (B, B_prime), eqHalf (H, H_prime)) ;
  addHalfSum (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = addHalf2 (O1, O_prime1, O2, O_prime2) ;
  addHalf2 (O1, O_prime1, O2, O_prime2) = addHalf1 (O1, O_prime1, addOctetSum (O2, O_prime2, x0)) ;
  addHalf1 (O1, O_prime1, buildOctetSum (B, O_second2)) = addHalf0 (addOctetSum (O1, O_prime1, B), O_second2) ;
  addHalf0 (buildOctetSum (B, O_second1), O_second2) = buildHalfSum (B, buildHalf (O_second1, O_second2)) ;
  dropCarryHalfSum (buildHalfSum (B, H)) = H ;
  addHalf (H, H_prime) = dropCarryHalfSum (addHalfSum (H, H_prime)) ;
  addHalfOctet (O, H) = addHalf (buildHalf (x00, O), H) ;
  addHalfOctets (O, O_prime) = addHalf (buildHalf (x00, O), buildHalf (x00, O_prime)) ;
  eqBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = andBool (andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)), andBool (eqOctet (O3, O_prime3), eqOctet (O4, O_prime4))) ;
  andBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (andOctet (O1, O_prime1), andOctet (O2, O_prime2), andOctet (O3, O_prime3), andOctet (O4, O_prime4)) ;
  orBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (orOctet (O1, O_prime1), orOctet (O2, O_prime2), orOctet (O3, O_prime3), orOctet (O4, O_prime4)) ;
  xorBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (xorOctet (O1, O_prime1), xorOctet (O2, O_prime2), xorOctet (O3, O_prime3), xorOctet (O4, O_prime4)) ;
  HalfU (buildBlock (O1, O2, O3, O4)) = buildHalf (O1, O2) ;
  HalfL (buildBlock (O1, O2, O3, O4)) = buildHalf (O3, O4) ;
  mulHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = mulHalfA (mulOctet (O1, O_prime1), mulOctet (O1, O_prime2), mulOctet (O2, O_prime1), mulOctet (O2, O_prime2)) ;
  mulHalfA (buildHalf (O11U, O11L), buildHalf (O12U, O12L), buildHalf (O21U, O21L), buildHalf (O22U, O22L)) = mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O22L) ;
  mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O_second4) = mulHalf3 (O11U, O11L, O12U, O21U, addHalfOctet (O12L, addHalfOctets (O21L, O22U)), O_second4) ;
  mulHalf3 (O11U, O11L, O12U, O21U, buildHalf (Ocarry, O_second3), O_second4) = mulHalf2 (O11U, addHalfOctet (Ocarry, addHalfOctet (O11L, addHalfOctets (O12U, O21U))), O_second3, O_second4) ;
  mulHalf2 (O11U, buildHalf (Ocarry, O_second2), O_second3, O_second4) = mulHalf1 (addHalfOctets (Ocarry, O11U), O_second2, O_second3, O_second4) ;
  mulHalf1 (buildHalf (Ocarry, O_second1), O_second2, O_second3, O_second4) = buildBlock (O_second1, O_second2, O_second3, O_second4) ;
  eqBlockSum (buildBlockSum (B, W), buildBlockSum (B_prime, W_prime)) = andBool (eqBit (B, B_prime), eqBlock (W, W_prime)) ;
  addBlockSum (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) ;
  addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) = addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, addOctetSum (O4, O_prime4, x0)) ;
  addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, buildOctetSum (Bcarry, O_second4)) = addBlock2 (O1, O_prime1, O2, O_prime2, addOctetSum (O3, O_prime3, Bcarry), O_second4) ;
  addBlock2 (O1, O_prime1, O2, O_prime2, buildOctetSum (Bcarry, O_second3), O_second4) = addBlock1 (O1, O_prime1, addOctetSum (O2, O_prime2, Bcarry), O_second3, O_second4) ;
  addBlock1 (O1, O_prime1, buildOctetSum (Bcarry, O_second2), O_second3, O_second4) = addBlock0 (addOctetSum (O1, O_prime1, Bcarry), O_second2, O_second3, O_second4) ;
  addBlock0 (buildOctetSum (Bcarry, O_second1), O_second2, O_second3, O_second4) = buildBlockSum (Bcarry, buildBlock (O_second1, O_second2, O_second3, O_second4)) ;
  dropCarryBlockSum (buildBlockSum (Bcarry, W)) = W ;
  addBlock (W, W_prime) = dropCarryBlockSum (addBlockSum (W, W_prime)) ;
  addBlockHalf (buildHalf (O1, O2), W) = addBlock (buildBlock (x00, x00, O1, O2), W) ;
  addBlockHalves (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = addBlock (buildBlock (x00, x00, O1, O2), buildBlock (x00, x00, O_prime1, O_prime2)) ;
  eqPair (buildPair (W1, W2), buildPair (W_prime1, W_prime2)) = andBool (eqBlock (W1, W_prime1), eqBlock (W2, W_prime2)) ;
  mulBlock (W1, W2) = mulBlockA (mulHalf (HalfU (W1), HalfU (W2)), mulHalf (HalfU (W1), HalfL (W2)), mulHalf (HalfL (W1), HalfU (W2)), mulHalf (HalfL (W1), HalfL (W2))) ;
  mulBlockA (W11, W12, W21, W22) = mulBlock4 (HalfU (W11), HalfL (W11), HalfU (W12), HalfL (W12), HalfU (W21), HalfL (W21), HalfU (W22), HalfL (W22)) ;
  mulBlock4 (H11U, H11L, H12U, H12L, H21U, H21L, H22U, H_second4) = mulBlock3 (H11U, H11L, H12U, H21U, addBlockHalf (H12L, addBlockHalves (H21L, H22U)), H_second4) ;
  mulBlock3 (H11U, H11L, H12U, H21U, W, H_second4) = mulBlock2 (H11U, addBlockHalf (HalfU (W), addBlockHalf (H11L, addBlockHalves (H12U, H21U))), HalfL (W), H_second4) ;
  mulBlock2 (H11U, W, H_second3, H_second4) = mulBlock1 (addBlockHalves (HalfU (W), H11U), HalfL (W), H_second3, H_second4) ;
  mulBlock1 (W, H_second2, H_second3, H_second4) = mulBlockB (HalfL (W), H_second2, H_second3, H_second4) ;
  mulBlockB (buildHalf (O1U, O1L), buildHalf (O2U, O2L), buildHalf (O3U, O3L), buildHalf (O4U, O4L)) = buildPair (buildBlock (O1U, O1L, O2U, O2L), buildBlock (O3U, O3L, O4U, O4L)) ;
  omulBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = omulBlock0 (mulOctet (O1, O_prime1), mulOctet (O1, O_prime2), mulOctet (O1, O_prime3), mulOctet (O1, O_prime4), mulOctet (O2, O_prime1), mulOctet (O2, O_prime2), mulOctet (O2, O_prime3), mulOctet (O2, O_prime4), mulOctet (O3, O_prime1), mulOctet (O3, O_prime2), mulOctet (O3, O_prime3), mulOctet (O3, O_prime4), mulOctet (O4, O_prime1), mulOctet (O4, O_prime2), mulOctet (O4, O_prime3), mulOctet (O4, O_prime4)) ;
  omulBlock0 (buildHalf (O11high, O11low), buildHalf (O12high, O12low), buildHalf (O13high, O13low), buildHalf (O14high, O14low), buildHalf (O21high, O21low), buildHalf (O22high, O22low), buildHalf (O23high, O23low), buildHalf (O24high, O24low), buildHalf (O31high, O31low), buildHalf (O32high, O32low), buildHalf (O33high, O33low), buildHalf (O34high, O34low), buildHalf (O41high, O41low), buildHalf (O42high, O42low), buildHalf (O43high, O43low), buildHalf (O44high, O44low)) = omulBlock8 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O34low, O41high, O41low, O42high, O42low, O43high, O43low, O44high, O44low) ;
  omulBlock8 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O34low, O41high, O41low, O42high, O42low, O43high, O43low, O44high, O8) = omulBlock7 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O41high, O41low, O42high, O42low, O43high, addHalfOctet (O44high, addHalfOctets (O34low, O43low)), O8) ;
  omulBlock7 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O24low, O31high, O31low, O32high, O32low, O33high, O33low, O34high, O41high, O41low, O42high, O42low, O43high, buildHalf (Ocarry, O7), O8) = omulBlock6 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O31high, O31low, O32high, O32low, O33high, O41high, O41low, O42high, addHalfOctet (Ocarry, addHalfOctet (O34high, addHalfOctet (O43high, addHalfOctet (O24low, addHalfOctets (O33low, O42low))))), O7, O8) ;
  omulBlock6 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O14low, O21high, O21low, O22high, O22low, O23high, O23low, O24high, O31high, O31low, O32high, O32low, O33high, O41high, O41low, O42high, buildHalf (Ocarry, O6), O7, O8) = omulBlock5 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O21high, O21low, O22high, O22low, O23high, O31high, O31low, O32high, O41high, addHalfOctet (Ocarry, addHalfOctet (O24high, addHalfOctet (O33high, addHalfOctet (O42high, addHalfOctet (O14low, addHalfOctet (O23low, addHalfOctets (O32low, O41low))))))), O6, O7, O8) ;
  omulBlock5 (O11high, O11low, O12high, O12low, O13high, O13low, O14high, O21high, O21low, O22high, O22low, O23high, O31high, O31low, O32high, O41high, buildHalf (Ocarry, O5), O6, O7, O8) = omulBlock4 (O11high, O11low, O12high, O12low, O13high, O21high, O21low, O22high, O31high, addHalfOctet (Ocarry, addHalfOctet (O14high, addHalfOctet (O23high, addHalfOctet (O32high, addHalfOctet (O41high, addHalfOctet (O13low, addHalfOctets (O22low, O31low))))))), O5, O6, O7, O8) ;
  omulBlock4 (O11high, O11low, O12high, O12low, O13high, O21high, O21low, O22high, O31high, buildHalf (Ocarry, O4), O5, O6, O7, O8) = omulBlock3 (O11high, O11low, O12high, O21high, addHalfOctet (Ocarry, addHalfOctet (O13high, addHalfOctet (O22high, addHalfOctet (O31high, addHalfOctets (O12low, O21low))))), O4, O5, O6, O7, O8) ;
  omulBlock3 (O11high, O11low, O12high, O21high, buildHalf (Ocarry, O3), O4, O5, O6, O7, O8) = omulBlock2 (O11high, addHalfOctet (Ocarry, addHalfOctet (O12high, addHalfOctets (O21high, O11low))), O3, O4, O5, O6, O7, O8) ;
  omulBlock2 (O11high, buildHalf (Ocarry, O2), O3, O4, O5, O6, O7, O8) = omulBlock1 (addHalfOctets (Ocarry, O11high), O2, O3, O4, O5, O6, O7, O8) ;
  omulBlock1 (buildHalf (Ocarry, O1), O2, O3, O4, O5, O6, O7, O8) = buildPair (buildBlock (O1, O2, O3, O4), buildBlock (O5, O6, O7, O8)) ;
  testMulBlock (W, W_prime, W1, W2) = andBool (eqPair (omulBlock (W, W_prime), buildPair (W1, W2)), eqPair (omulBlock (W_prime, W), buildPair (W1, W2))) ;

sort Xbool = struct
  Xfalse
| Xtrue ;

sort Xnat = struct
  n0
| succNat (Xnat) ;

sort Bit = struct
  x0
| x1 ;

sort Octet = struct
  buildOctet (Bit, Bit, Bit, Bit, Bit, Bit, Bit, Bit) ;

sort OctetSum = struct
  buildOctetSum (Bit, Octet) ;

sort Half = struct
  buildHalf (Octet, Octet) ;

sort HalfSum = struct
  buildHalfSum (Bit, Half) ;

sort Block = struct
  buildBlock (Octet, Octet, Octet, Octet) ;

sort BlockSum = struct
  buildBlockSum (Bit, Block) ;

sort Pair = struct
  buildPair (Block, Block) ;

sort Key = struct
  buildKey (Block, Block) ;

sort Message = struct
  unitMessage (Block)
| consMessage (Block, Message) ;

sort SegmentedMessage = struct
  unitSegment (Message)
| consSegment (Message, SegmentedMessage) ;

map
  notBool : Xbool -> Xbool ;
  andBool : Xbool # Xbool -> Xbool ;
  orBool : Xbool # Xbool -> Xbool ;
  xorBool : Xbool # Xbool -> Xbool ;
  n1 : Xnat ;
  n2 : Xnat ;
  n3 : Xnat ;
  n4 : Xnat ;
  n5 : Xnat ;
  n6 : Xnat ;
  n7 : Xnat ;
  n8 : Xnat ;
  n9 : Xnat ;
  n10 : Xnat ;
  n11 : Xnat ;
  n12 : Xnat ;
  n13 : Xnat ;
  n14 : Xnat ;
  n15 : Xnat ;
  n16 : Xnat ;
  n17 : Xnat ;
  n18 : Xnat ;
  n19 : Xnat ;
  n20 : Xnat ;
  n21 : Xnat ;
  n22 : Xnat ;
  eqNat : Xnat # Xnat -> Xbool ;
  ltNat : Xnat # Xnat -> Xbool ;
  gtNat : Xnat # Xnat -> Xbool ;
  evenNat : Xnat -> Xbool ;
  oddNat : Xnat -> Xbool ;
  predNat : Xnat -> Xnat ;
  maxNat : Xnat # Xnat -> Xnat ;
  minNat : Xnat # Xnat -> Xnat ;
  addNat : Xnat # Xnat -> Xnat ;
  subNat : Xnat # Xnat -> Xnat ;
  mulNat : Xnat # Xnat -> Xnat ;
  powNat : Xnat # Xnat -> Xnat ;
  divNat : Xnat # Xnat -> Xnat ;
  adivNat : Xnat # Xnat # Xnat # Xnat -> Xnat ;
  cdivNat : Xnat # Xnat -> Xnat ;
  modNat : Xnat # Xnat -> Xnat ;
  amodNat : Xnat # Xnat # Xnat # Xnat -> Xnat ;
  cmodNat : Xnat # Xnat -> Xnat ;
  notBit : Bit -> Bit ;
  andBit : Bit # Bit -> Bit ;
  orBit : Bit # Bit -> Bit ;
  xorBit : Bit # Bit -> Bit ;
  eqBit : Bit # Bit -> Xbool ;
  eqOctet : Octet # Octet -> Xbool ;
  andOctet : Octet # Octet -> Octet ;
  orOctet : Octet # Octet -> Octet ;
  xorOctet : Octet # Octet -> Octet ;
  leftOctet1 : Octet -> Octet ;
  leftOctet2 : Octet -> Octet ;
  leftOctet3 : Octet -> Octet ;
  leftOctet4 : Octet -> Octet ;
  leftOctet5 : Octet -> Octet ;
  leftOctet6 : Octet -> Octet ;
  leftOctet7 : Octet -> Octet ;
  rightOctet1 : Octet -> Octet ;
  rightOctet2 : Octet -> Octet ;
  rightOctet3 : Octet -> Octet ;
  rightOctet4 : Octet -> Octet ;
  rightOctet5 : Octet -> Octet ;
  rightOctet6 : Octet -> Octet ;
  rightOctet7 : Octet -> Octet ;
  x00 : Octet ;
  x01 : Octet ;
  x02 : Octet ;
  x03 : Octet ;
  x04 : Octet ;
  x05 : Octet ;
  x06 : Octet ;
  x07 : Octet ;
  x08 : Octet ;
  x09 : Octet ;
  x0A : Octet ;
  x0B : Octet ;
  x0C : Octet ;
  x0D : Octet ;
  x0E : Octet ;
  x0F : Octet ;
  x10 : Octet ;
  x11 : Octet ;
  x12 : Octet ;
  x13 : Octet ;
  x14 : Octet ;
  x15 : Octet ;
  x16 : Octet ;
  x17 : Octet ;
  x18 : Octet ;
  x19 : Octet ;
  x1A : Octet ;
  x1B : Octet ;
  x1C : Octet ;
  x1D : Octet ;
  x1E : Octet ;
  x1F : Octet ;
  x20 : Octet ;
  x21 : Octet ;
  x22 : Octet ;
  x23 : Octet ;
  x24 : Octet ;
  x25 : Octet ;
  x26 : Octet ;
  x27 : Octet ;
  x28 : Octet ;
  x29 : Octet ;
  x2A : Octet ;
  x2B : Octet ;
  x2C : Octet ;
  x2D : Octet ;
  x2E : Octet ;
  x2F : Octet ;
  x30 : Octet ;
  x31 : Octet ;
  x32 : Octet ;
  x33 : Octet ;
  x34 : Octet ;
  x35 : Octet ;
  x36 : Octet ;
  x37 : Octet ;
  x38 : Octet ;
  x39 : Octet ;
  x3A : Octet ;
  x3B : Octet ;
  x3C : Octet ;
  x3D : Octet ;
  x3E : Octet ;
  x3F : Octet ;
  x40 : Octet ;
  x41 : Octet ;
  x42 : Octet ;
  x43 : Octet ;
  x44 : Octet ;
  x45 : Octet ;
  x46 : Octet ;
  x47 : Octet ;
  x48 : Octet ;
  x49 : Octet ;
  x4A : Octet ;
  x4B : Octet ;
  x4C : Octet ;
  x4D : Octet ;
  x4E : Octet ;
  x4F : Octet ;
  x50 : Octet ;
  x51 : Octet ;
  x52 : Octet ;
  x53 : Octet ;
  x54 : Octet ;
  x55 : Octet ;
  x56 : Octet ;
  x57 : Octet ;
  x58 : Octet ;
  x59 : Octet ;
  x5A : Octet ;
  x5B : Octet ;
  x5C : Octet ;
  x5D : Octet ;
  x5E : Octet ;
  x5F : Octet ;
  x60 : Octet ;
  x61 : Octet ;
  x62 : Octet ;
  x63 : Octet ;
  x64 : Octet ;
  x65 : Octet ;
  x66 : Octet ;
  x67 : Octet ;
  x68 : Octet ;
  x69 : Octet ;
  x6A : Octet ;
  x6B : Octet ;
  x6C : Octet ;
  x6D : Octet ;
  x6E : Octet ;
  x6F : Octet ;
  x70 : Octet ;
  x71 : Octet ;
  x72 : Octet ;
  x73 : Octet ;
  x74 : Octet ;
  x75 : Octet ;
  x76 : Octet ;
  x77 : Octet ;
  x78 : Octet ;
  x79 : Octet ;
  x7A : Octet ;
  x7B : Octet ;
  x7C : Octet ;
  x7D : Octet ;
  x7E : Octet ;
  x7F : Octet ;
  x80 : Octet ;
  x81 : Octet ;
  x82 : Octet ;
  x83 : Octet ;
  x84 : Octet ;
  x85 : Octet ;
  x86 : Octet ;
  x87 : Octet ;
  x88 : Octet ;
  x89 : Octet ;
  x8A : Octet ;
  x8B : Octet ;
  x8C : Octet ;
  x8D : Octet ;
  x8E : Octet ;
  x8F : Octet ;
  x90 : Octet ;
  x91 : Octet ;
  x92 : Octet ;
  x93 : Octet ;
  x94 : Octet ;
  x95 : Octet ;
  x96 : Octet ;
  x97 : Octet ;
  x98 : Octet ;
  x99 : Octet ;
  x9A : Octet ;
  x9B : Octet ;
  x9C : Octet ;
  x9D : Octet ;
  x9E : Octet ;
  x9F : Octet ;
  xA0 : Octet ;
  xA1 : Octet ;
  xA2 : Octet ;
  xA3 : Octet ;
  xA4 : Octet ;
  xA5 : Octet ;
  xA6 : Octet ;
  xA7 : Octet ;
  xA8 : Octet ;
  xA9 : Octet ;
  xAA : Octet ;
  xAB : Octet ;
  xAC : Octet ;
  xAD : Octet ;
  xAE : Octet ;
  xAF : Octet ;
  xB0 : Octet ;
  xB1 : Octet ;
  xB2 : Octet ;
  xB3 : Octet ;
  xB4 : Octet ;
  xB5 : Octet ;
  xB6 : Octet ;
  xB7 : Octet ;
  xB8 : Octet ;
  xB9 : Octet ;
  xBA : Octet ;
  xBB : Octet ;
  xBC : Octet ;
  xBD : Octet ;
  xBE : Octet ;
  xBF : Octet ;
  xC0 : Octet ;
  xC1 : Octet ;
  xC2 : Octet ;
  xC3 : Octet ;
  xC4 : Octet ;
  xC5 : Octet ;
  xC6 : Octet ;
  xC7 : Octet ;
  xC8 : Octet ;
  xC9 : Octet ;
  xCA : Octet ;
  xCB : Octet ;
  xCC : Octet ;
  xCD : Octet ;
  xCE : Octet ;
  xCF : Octet ;
  xD0 : Octet ;
  xD1 : Octet ;
  xD2 : Octet ;
  xD3 : Octet ;
  xD4 : Octet ;
  xD5 : Octet ;
  xD6 : Octet ;
  xD7 : Octet ;
  xD8 : Octet ;
  xD9 : Octet ;
  xDA : Octet ;
  xDB : Octet ;
  xDC : Octet ;
  xDD : Octet ;
  xDE : Octet ;
  xDF : Octet ;
  xE0 : Octet ;
  xE1 : Octet ;
  xE2 : Octet ;
  xE3 : Octet ;
  xE4 : Octet ;
  xE5 : Octet ;
  xE6 : Octet ;
  xE7 : Octet ;
  xE8 : Octet ;
  xE9 : Octet ;
  xEA : Octet ;
  xEB : Octet ;
  xEC : Octet ;
  xED : Octet ;
  xEE : Octet ;
  xEF : Octet ;
  xF0 : Octet ;
  xF1 : Octet ;
  xF2 : Octet ;
  xF3 : Octet ;
  xF4 : Octet ;
  xF5 : Octet ;
  xF6 : Octet ;
  xF7 : Octet ;
  xF8 : Octet ;
  xF9 : Octet ;
  xFA : Octet ;
  xFB : Octet ;
  xFC : Octet ;
  xFD : Octet ;
  xFE : Octet ;
  xFF : Octet ;
  eqOctetSum : OctetSum # OctetSum -> Xbool ;
  addBit : Bit # Bit # Bit -> Bit ;
  carBit : Bit # Bit # Bit -> Bit ;
  addOctetSum : Octet # Octet # Bit -> OctetSum ;
  addOctet8 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet7 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet6 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet5 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet4 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet3 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet2 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet1 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  addOctet0 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit -> OctetSum ;
  dropCarryOctetSum : OctetSum -> Octet ;
  addOctet : Octet # Octet -> Octet ;
  eqHalf : Half # Half -> Xbool ;
  x0000 : Half ;
  x0001 : Half ;
  mulOctet : Octet # Octet -> Half ;
  mulOctet1 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet2 : Bit # Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet3 : Bit # Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet4 : Bit # Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet5 : Bit # Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet6 : Bit # Bit # Bit # Octet # Half -> Half ;
  mulOctet7 : Bit # Bit # Octet # Half -> Half ;
  mulOctet8 : Bit # Octet # Half -> Half ;
  mulOctetA : Half # Octet # Octet -> Half ;
  mulOctetB : Octet # OctetSum -> Half ;
  eqHalfSum : HalfSum # HalfSum -> Xbool ;
  addHalfSum : Half # Half -> HalfSum ;
  addHalf2 : Octet # Octet # Octet # Octet -> HalfSum ;
  addHalf1 : Octet # Octet # OctetSum -> HalfSum ;
  addHalf0 : OctetSum # Octet -> HalfSum ;
  dropCarryHalfSum : HalfSum -> Half ;
  addHalf : Half # Half -> Half ;
  addHalfOctet : Octet # Half -> Half ;
  addHalfOctets : Octet # Octet -> Half ;
  eqBlock : Block # Block -> Xbool ;
  andBlock : Block # Block -> Block ;
  orBlock : Block # Block -> Block ;
  xorBlock : Block # Block -> Block ;
  HalfU : Block -> Half ;
  HalfL : Block -> Half ;
  mulHalf : Half # Half -> Block ;
  mulHalfA : Half # Half # Half # Half -> Block ;
  mulHalf4 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> Block ;
  mulHalf3 : Octet # Octet # Octet # Octet # Half # Octet -> Block ;
  mulHalf2 : Octet # Half # Octet # Octet -> Block ;
  mulHalf1 : Half # Octet # Octet # Octet -> Block ;
  eqBlockSum : BlockSum # BlockSum -> Xbool ;
  addBlockSum : Block # Block -> BlockSum ;
  addBlock4 : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> BlockSum ;
  addBlock3 : Octet # Octet # Octet # Octet # Octet # Octet # OctetSum -> BlockSum ;
  addBlock2 : Octet # Octet # Octet # Octet # OctetSum # Octet -> BlockSum ;
  addBlock1 : Octet # Octet # OctetSum # Octet # Octet -> BlockSum ;
  addBlock0 : OctetSum # Octet # Octet # Octet -> BlockSum ;
  dropCarryBlockSum : BlockSum -> Block ;
  addBlock : Block # Block -> Block ;
  addBlockHalf : Half # Block -> Block ;
  addBlockHalves : Half # Half -> Block ;
  eqPair : Pair # Pair -> Xbool ;
  mulBlock : Block # Block -> Pair ;
  mulBlockA : Block # Block # Block # Block -> Pair ;
  mulBlock4 : Half # Half # Half # Half # Half # Half # Half # Half -> Pair ;
  mulBlock3 : Half # Half # Half # Half # Block # Half -> Pair ;
  mulBlock2 : Half # Block # Half # Half -> Pair ;
  mulBlock1 : Block # Half # Half # Half -> Pair ;
  mulBlockB : Half # Half # Half # Half -> Pair ;
  n254 : Xnat ;
  n256 : Xnat ;
  n4100 : Xnat ;
  x00000000 : Block ;
  x00000001 : Block ;
  x00000002 : Block ;
  x00000003 : Block ;
  x00000004 : Block ;
  x00000005 : Block ;
  x00000006 : Block ;
  x00000007 : Block ;
  x00000008 : Block ;
  x00000009 : Block ;
  x0000000A : Block ;
  x0000000B : Block ;
  x0000000C : Block ;
  x0000000D : Block ;
  x0000000E : Block ;
  x0000000F : Block ;
  x00000010 : Block ;
  x00000012 : Block ;
  x00000014 : Block ;
  x00000016 : Block ;
  x00000018 : Block ;
  x0000001B : Block ;
  x0000001D : Block ;
  x0000001E : Block ;
  x0000001F : Block ;
  x00000031 : Block ;
  x00000036 : Block ;
  x00000060 : Block ;
  x00000080 : Block ;
  x000000A5 : Block ;
  x000000B6 : Block ;
  x000000C4 : Block ;
  x000000D2 : Block ;
  x00000100 : Block ;
  x00000129 : Block ;
  x0000018C : Block ;
  x00004000 : Block ;
  x00010000 : Block ;
  x00020000 : Block ;
  x00030000 : Block ;
  x00040000 : Block ;
  x00060000 : Block ;
  x00804021 : Block ;
  x00FF00FF : Block ;
  x0103050B : Block ;
  x01030703 : Block ;
  x01030705 : Block ;
  x0103070F : Block ;
  x02040801 : Block ;
  x0297AF6F : Block ;
  x07050301 : Block ;
  x077788A2 : Block ;
  x07C72EAA : Block ;
  x0A202020 : Block ;
  x0AD67E20 : Block ;
  x10000000 : Block ;
  x11A9D254 : Block ;
  x11AC46B8 : Block ;
  x1277A6D4 : Block ;
  x13647149 : Block ;
  x160EE9B5 : Block ;
  x17065DBB : Block ;
  x17A808FD : Block ;
  x1D10D8D3 : Block ;
  x1D3B7760 : Block ;
  x1D9C9655 : Block ;
  x1F3F7FFF : Block ;
  x204E80A7 : Block ;
  x21D869BA : Block ;
  x24B66FB5 : Block ;
  x270EEDAF : Block ;
  x277B4B25 : Block ;
  x2829040B : Block ;
  x288FC786 : Block ;
  x28EAD8B3 : Block ;
  x29907CD8 : Block ;
  x29C1485F : Block ;
  x29EEE96B : Block ;
  x2A6091AE : Block ;
  x2BF8499A : Block ;
  x2E80AC30 : Block ;
  x2FD76FFB : Block ;
  x30261492 : Block ;
  x303FF4AA : Block ;
  x33D5A466 : Block ;
  x344925FC : Block ;
  x34ACF886 : Block ;
  x3CD54DEB : Block ;
  x3CF3A7D2 : Block ;
  x3DD81AC6 : Block ;
  x3F6F7248 : Block ;
  x48B204D6 : Block ;
  x4A645A01 : Block ;
  x4C49AAE0 : Block ;
  x4CE933E1 : Block ;
  x4D53901A : Block ;
  x4DA124A1 : Block ;
  x4F998E01 : Block ;
  x4FB1138A : Block ;
  x50DEC930 : Block ;
  x51AF3C1D : Block ;
  x51EDE9C7 : Block ;
  x550D91CE : Block ;
  x55555555 : Block ;
  x55DD063F : Block ;
  x5834A585 : Block ;
  x5A35D667 : Block ;
  x5BC02502 : Block ;
  x5CCA3239 : Block ;
  x5EBA06C2 : Block ;
  x5F38EEF1 : Block ;
  x613F8E2A : Block ;
  x63C70DBA : Block ;
  x6AD6E8A4 : Block ;
  x6AEBACF8 : Block ;
  x6D67E884 : Block ;
  x7050EC5E : Block ;
  x717153D5 : Block ;
  x7201F4DC : Block ;
  x7397C9AE : Block ;
  x74B39176 : Block ;
  x76232E5F : Block ;
  x7783C51D : Block ;
  x7792F9D4 : Block ;
  x7BC180AB : Block ;
  x7DB2D9F4 : Block ;
  x7DFEFBFF : Block ;
  x7F76A3B0 : Block ;
  x7F839576 : Block ;
  x7FFFFFF0 : Block ;
  x7FFFFFF1 : Block ;
  x7FFFFFFC : Block ;
  x7FFFFFFD : Block ;
  x80000000 : Block ;
  x80000002 : Block ;
  x800000C2 : Block ;
  x80018000 : Block ;
  x80018001 : Block ;
  x80397302 : Block ;
  x81D10CA3 : Block ;
  x89D635D7 : Block ;
  x8CE37709 : Block ;
  x8DC8BBDE : Block ;
  x9115A558 : Block ;
  x91896CFA : Block ;
  x9372CDC6 : Block ;
  x98D1CC75 : Block ;
  x9D15C437 : Block ;
  x9DB15CF6 : Block ;
  x9E2E7B36 : Block ;
  xA018C83B : Block ;
  xA0B87B77 : Block ;
  xA44AAAC0 : Block ;
  xA511987A : Block ;
  xA70FC148 : Block ;
  xA93BD410 : Block ;
  xAAAAAAAA : Block ;
  xAB00FFCD : Block ;
  xAB01FCCD : Block ;
  xAB6EED4A : Block ;
  xABEEED6B : Block ;
  xACBC13DD : Block ;
  xB1CC1CC5 : Block ;
  xB8142629 : Block ;
  xB99A62DE : Block ;
  xBA92DB12 : Block ;
  xBBA57835 : Block ;
  xBE9F0917 : Block ;
  xBF2D7D85 : Block ;
  xBFEF7FDF : Block ;
  xC1ED90DD : Block ;
  xC21A1846 : Block ;
  xC4EB1AEB : Block ;
  xC6B1317E : Block ;
  xCBC865BA : Block ;
  xCD959B46 : Block ;
  xD0482465 : Block ;
  xD636250D : Block ;
  xD7843FDC : Block ;
  xD78634BC : Block ;
  xD8804CA5 : Block ;
  xDB79FBDC : Block ;
  xDB9102B0 : Block ;
  xE0C08000 : Block ;
  xE6A12F07 : Block ;
  xEB35B97F : Block ;
  xF0239DD5 : Block ;
  xF14D6E28 : Block ;
  xF2EF3501 : Block ;
  xF6A09667 : Block ;
  xFD297DA4 : Block ;
  xFDC1A8BA : Block ;
  xFE4E5BDD : Block ;
  xFEA1D334 : Block ;
  xFECCAA6E : Block ;
  xFEFC07F0 : Block ;
  xFF2D7DA5 : Block ;
  xFFEF0001 : Block ;
  xFFFF00FF : Block ;
  xFFFFFF2D : Block ;
  xFFFFFF3A : Block ;
  xFFFFFFF0 : Block ;
  xFFFFFFF1 : Block ;
  xFFFFFFF4 : Block ;
  xFFFFFFF5 : Block ;
  xFFFFFFF7 : Block ;
  xFFFFFFF9 : Block ;
  xFFFFFFFA : Block ;
  xFFFFFFFB : Block ;
  xFFFFFFFC : Block ;
  xFFFFFFFD : Block ;
  xFFFFFFFE : Block ;
  xFFFFFFFF : Block ;
  appendMessage : Message # Block -> Message ;
  reverseMessage : Message -> Message ;
  makeMessage : Xnat # Block # Block -> Message ;
  splitSegment : Message -> SegmentedMessage ;
  cutSegment : Message # Message # Xnat -> SegmentedMessage ;
  ADD : Block # Block -> Block ;
  AND : Block # Block -> Block ;
  MUL : Block # Block -> Pair ;
  OR : Block # Block -> Block ;
  XOR : Block # Block -> Block ;
  XOR_prime : Pair -> Block ;
  CYC : Block -> Block ;
  nCYC : Xnat # Block -> Block ;
  FIX1 : Block -> Block ;
  FIX2 : Block -> Block ;
  needAdjust : Octet -> Xbool ;
  adjustCode : Octet -> Bit ;
  adjust : Octet # Octet -> Octet ;
  PAT : Block # Block -> Octet ;
  BYT : Block # Block -> Pair ;
  BYT_prime : Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet # Octet -> Pair ;
  ADDC : Block # Block -> Pair ;
  ADDC_prime : BlockSum -> Pair ;
  MUL1 : Block # Block -> Block ;
  MUL1XY : Pair -> Block ;
  MUL1UL : Block # Block -> Block ;
  MUL1SC : Pair -> Block ;
  MUL2 : Block # Block -> Block ;
  MUL2XY : Pair -> Block ;
  MUL2UL : Block # Block -> Block ;
  MUL2DEL : Pair # Block -> Block ;
  MUL2FL : Block # Block -> Block ;
  MUL2SC : Pair -> Block ;
  MUL2A : Block # Block -> Block ;
  MUL2AXY : Pair -> Block ;
  MUL2AUL : Block # Block -> Block ;
  MUL2ADL : Block # Block -> Block ;
  MUL2ASC : Pair -> Block ;
  squareHalf : Half -> Block ;
  Q : Octet -> Block ;
  H4 : Block -> Block ;
  H6 : Block -> Block ;
  H8 : Block -> Block ;
  H0 : Block -> Block ;
  H5 : Block # Octet -> Block ;
  H7 : Block -> Block ;
  H9 : Block -> Block ;
  J1_2 : Block -> Block ;
  J1_4 : Block -> Block ;
  J1_6 : Block -> Block ;
  J1_8 : Block -> Block ;
  J2_2 : Block -> Block ;
  J2_4 : Block -> Block ;
  J2_6 : Block -> Block ;
  J2_8 : Block -> Block ;
  K1_2 : Block -> Block ;
  K1_4 : Block -> Block ;
  K1_5 : Block -> Block ;
  K1_7 : Block -> Block ;
  K1_9 : Block -> Block ;
  K2_2 : Block -> Block ;
  K2_4 : Block -> Block ;
  K2_5 : Block -> Block ;
  K2_7 : Block -> Block ;
  K2_9 : Block -> Block ;
  preludeXY : Block # Block -> Pair ;
  preludeVW : Block # Block -> Pair ;
  preludeST : Block # Block -> Pair ;
  preludeXY_prime : Pair # Octet -> Pair ;
  preludeVW_prime : Pair -> Pair ;
  preludeST_prime : Pair -> Pair ;
  computeXY : Pair # Pair # Block -> Pair ;
  computeXY_prime : Pair # Block # Block -> Pair ;
  computeVW : Pair -> Pair ;
  loop1 : Pair # Pair # Message -> Pair ;
  loop2 : Pair # Pair # Message -> Pair ;
  coda : Pair # Pair # Pair -> Block ;
  MAA : Key # Message -> Block ;
  MAA_prime : Pair # Pair # Pair # Message -> Block ;
  MAC : Key # Message -> Block ;
  MACfirst : Key # SegmentedMessage -> Block ;
  MACnext : Key # Block # SegmentedMessage -> Block ;
var
  L : Xbool ;
  N, N_prime, Np, Nq : Xnat ;
  B : Bit ;
  B1, B2, B3, B4, B5, B6, B7, B8, B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8 : Bit ;
  B_prime, Bcarry : Bit ;
  B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8 : Bit ;
  O, O_prime : Octet ;
  O1, O2, O_prime1, O_prime2 : Octet ;
  H : Half ;
  O_second1, O_second2 : Octet ;
  H_prime : Half ;
  O3, O4, O_prime3, O_prime4, O_second3, O_second4 : Octet ;
  O11L, O11U, O12L, O12U, O21L, O21U, O22L, O22U, Ocarry : Octet ;
  W, W_prime : Block ;
  O1U, O1L, O2U, O2L, O3U, O3L, O4U, O4L : Octet ;
  H_second1, H_second2, H_second3, H_second4, H11L, H11U, H12L, H12U, H21L, H21U, H22L, H22U, Hcarry : Half ;
  W1, W2, W_prime1, W_prime2, W11, W12, W21, W22 : Block ;
  B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24, B25, B26, B27, B28, B29, B30, B31, B32 : Bit ;
  Opat : Octet ;
  Wcarry : Block ;
  P, P_prime, P1, P2, P3 : Pair ;
  K : Key ;
  M, M_prime : Message ;
  S : SegmentedMessage ;
eqn
  notBool (Xfalse) = Xtrue ;
  notBool (Xtrue) = Xfalse ;
  andBool (Xfalse, L) = Xfalse ;
  andBool (Xtrue, L) = L ;
  orBool (Xfalse, L) = L ;
  orBool (Xtrue, L) = Xtrue ;
  xorBool (Xfalse, L) = L ;
  xorBool (Xtrue, L) = notBool (L) ;
  n1 = succNat (n0) ;
  n2 = succNat (n1) ;
  n3 = succNat (n2) ;
  n4 = succNat (n3) ;
  n5 = succNat (n4) ;
  n6 = succNat (n5) ;
  n7 = succNat (n6) ;
  n8 = succNat (n7) ;
  n9 = succNat (n8) ;
  n10 = succNat (n9) ;
  n11 = succNat (n10) ;
  n12 = succNat (n11) ;
  n13 = succNat (n12) ;
  n14 = succNat (n13) ;
  n15 = succNat (n14) ;
  n16 = succNat (n15) ;
  n17 = succNat (n16) ;
  n18 = succNat (n17) ;
  n19 = succNat (n18) ;
  n20 = succNat (n19) ;
  n21 = succNat (n20) ;
  n22 = succNat (n21) ;
  eqNat (n0, n0) = Xtrue ;
  eqNat (n0, succNat (N_prime)) = Xfalse ;
  eqNat (succNat (N), n0) = Xfalse ;
  eqNat (succNat (N), succNat (N_prime)) = eqNat (N, N_prime) ;
  ltNat (n0, n0) = Xfalse ;
  ltNat (n0, succNat (N_prime)) = Xtrue ;
  ltNat (succNat (N), n0) = Xfalse ;
  ltNat (succNat (N), succNat (N_prime)) = ltNat (N, N_prime) ;
  gtNat (n0, n0) = Xfalse ;
  gtNat (n0, succNat (N_prime)) = Xfalse ;
  gtNat (succNat (N), n0) = Xtrue ;
  gtNat (succNat (N), succNat (N_prime)) = gtNat (N, N_prime) ;
  evenNat (n0) = Xtrue ;
  evenNat (succNat (N)) = oddNat (N) ;
  oddNat (n0) = Xfalse ;
  oddNat (succNat (N)) = evenNat (N) ;
  predNat (succNat (N)) = N ;
  gtNat (N, N_prime) == Xtrue -> maxNat (N, N_prime) = N ;
  notBool (gtNat (N, N_prime)) == Xtrue -> maxNat (N, N_prime) = N_prime ;
  ltNat (N, N_prime) == Xtrue -> minNat (N, N_prime) = N ;
  notBool (ltNat (N, N_prime)) == Xtrue -> minNat (N, N_prime) = N_prime ;
  addNat (N, n0) = N ;
  addNat (N, succNat (N_prime)) = addNat (succNat (N), N_prime) ;
  subNat (N, n0) = N ;
  subNat (succNat (N), succNat (N_prime)) = subNat (N, N_prime) ;
  mulNat (N, n0) = n0 ;
  mulNat (N, succNat (N_prime)) = addNat (N, mulNat (N, N_prime)) ;
  powNat (N, n0) = n1 ;
  powNat (n0, succNat (N)) = n0 ;
  powNat (N, succNat (N_prime)) = mulNat (powNat (N, N_prime), N) ;
  divNat (N, succNat (N_prime)) = adivNat (N, succNat (N_prime), n0, succNat (N_prime)) ;
  adivNat (n0, n0, Nq, N_prime) = succNat (Nq) ;
  adivNat (n0, succNat (Np), Nq, N_prime) = Nq ;
  adivNat (succNat (N), n0, Nq, N_prime) = adivNat (succNat (N), N_prime, succNat (Nq), N_prime) ;
  adivNat (succNat (N), succNat (Np), Nq, N_prime) = adivNat (N, Np, Nq, N_prime) ;
  andBool (notBool (eqNat (N_prime, n0)), ltNat (N, N_prime)) == Xtrue -> cdivNat (N, N_prime) = n0 ;
  andBool (notBool (eqNat (N_prime, n0)), notBool (ltNat (N, N_prime))) == Xtrue -> cdivNat (N, N_prime) = succNat (cdivNat (subNat (N, N_prime), N_prime)) ;
  modNat (N, succNat (N_prime)) = amodNat (N, succNat (N_prime), n0, succNat (N_prime)) ;
  amodNat (n0, n0, Nq, N_prime) = n0 ;
  amodNat (n0, succNat (Np), Nq, N_prime) = subNat (N_prime, succNat (Np)) ;
  amodNat (succNat (N), n0, Nq, N_prime) = amodNat (succNat (N), N_prime, succNat (Nq), N_prime) ;
  amodNat (succNat (N), succNat (Np), Nq, N_prime) = amodNat (N, Np, Nq, N_prime) ;
  andBool (notBool (eqNat (N_prime, n0)), ltNat (N, N_prime)) == Xtrue -> cmodNat (N, N_prime) = N ;
  andBool (notBool (eqNat (N_prime, n0)), notBool (ltNat (N, N_prime))) == Xtrue -> cmodNat (N, N_prime) = cmodNat (subNat (N, N_prime), N_prime) ;
  notBit (x0) = x1 ;
  notBit (x1) = x0 ;
  andBit (B, x0) = x0 ;
  andBit (B, x1) = B ;
  orBit (B, x0) = B ;
  orBit (B, x1) = x1 ;
  xorBit (B, x0) = B ;
  xorBit (B, x1) = notBit (B) ;
  eqBit (x0, x0) = Xtrue ;
  eqBit (x0, x1) = Xfalse ;
  eqBit (x1, x0) = Xfalse ;
  eqBit (x1, x1) = Xtrue ;
  eqOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = andBool (eqBit (B1, B_prime1), andBool (eqBit (B2, B_prime2), andBool (eqBit (B3, B_prime3), andBool (eqBit (B4, B_prime4), andBool (eqBit (B5, B_prime5), andBool (eqBit (B6, B_prime6), andBool (eqBit (B7, B_prime7), eqBit (B8, B_prime8)))))))) ;
  andOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (andBit (B1, B_prime1), andBit (B2, B_prime2), andBit (B3, B_prime3), andBit (B4, B_prime4), andBit (B5, B_prime5), andBit (B6, B_prime6), andBit (B7, B_prime7), andBit (B8, B_prime8)) ;
  orOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (orBit (B1, B_prime1), orBit (B2, B_prime2), orBit (B3, B_prime3), orBit (B4, B_prime4), orBit (B5, B_prime5), orBit (B6, B_prime6), orBit (B7, B_prime7), orBit (B8, B_prime8)) ;
  xorOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8)) = buildOctet (xorBit (B1, B_prime1), xorBit (B2, B_prime2), xorBit (B3, B_prime3), xorBit (B4, B_prime4), xorBit (B5, B_prime5), xorBit (B6, B_prime6), xorBit (B7, B_prime7), xorBit (B8, B_prime8)) ;
  leftOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B2, B3, B4, B5, B6, B7, B8, x0) ;
  leftOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B3, B4, B5, B6, B7, B8, x0, x0) ;
  leftOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B4, B5, B6, B7, B8, x0, x0, x0) ;
  leftOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B5, B6, B7, B8, x0, x0, x0, x0) ;
  leftOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B6, B7, B8, x0, x0, x0, x0, x0) ;
  leftOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B7, B8, x0, x0, x0, x0, x0, x0) ;
  leftOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (B8, x0, x0, x0, x0, x0, x0, x0) ;
  rightOctet1 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, B1, B2, B3, B4, B5, B6, B7) ;
  rightOctet2 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, B1, B2, B3, B4, B5, B6) ;
  rightOctet3 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, B1, B2, B3, B4, B5) ;
  rightOctet4 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, B1, B2, B3, B4) ;
  rightOctet5 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, B1, B2, B3) ;
  rightOctet6 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, x0, B1, B2) ;
  rightOctet7 (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8)) = buildOctet (x0, x0, x0, x0, x0, x0, x0, B1) ;
  x00 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x0) ;
  x01 = buildOctet (x0, x0, x0, x0, x0, x0, x0, x1) ;
  x02 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x0) ;
  x03 = buildOctet (x0, x0, x0, x0, x0, x0, x1, x1) ;
  x04 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x0) ;
  x05 = buildOctet (x0, x0, x0, x0, x0, x1, x0, x1) ;
  x06 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x0) ;
  x07 = buildOctet (x0, x0, x0, x0, x0, x1, x1, x1) ;
  x08 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x0) ;
  x09 = buildOctet (x0, x0, x0, x0, x1, x0, x0, x1) ;
  x0A = buildOctet (x0, x0, x0, x0, x1, x0, x1, x0) ;
  x0B = buildOctet (x0, x0, x0, x0, x1, x0, x1, x1) ;
  x0C = buildOctet (x0, x0, x0, x0, x1, x1, x0, x0) ;
  x0D = buildOctet (x0, x0, x0, x0, x1, x1, x0, x1) ;
  x0E = buildOctet (x0, x0, x0, x0, x1, x1, x1, x0) ;
  x0F = buildOctet (x0, x0, x0, x0, x1, x1, x1, x1) ;
  x10 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x0) ;
  x11 = buildOctet (x0, x0, x0, x1, x0, x0, x0, x1) ;
  x12 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x0) ;
  x13 = buildOctet (x0, x0, x0, x1, x0, x0, x1, x1) ;
  x14 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x0) ;
  x15 = buildOctet (x0, x0, x0, x1, x0, x1, x0, x1) ;
  x16 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x0) ;
  x17 = buildOctet (x0, x0, x0, x1, x0, x1, x1, x1) ;
  x18 = buildOctet (x0, x0, x0, x1, x1, x0, x0, x0) ;
  x19 = buildOctet (x0, x0, x0, x1, x1, x0, x0, x1) ;
  x1A = buildOctet (x0, x0, x0, x1, x1, x0, x1, x0) ;
  x1B = buildOctet (x0, x0, x0, x1, x1, x0, x1, x1) ;
  x1C = buildOctet (x0, x0, x0, x1, x1, x1, x0, x0) ;
  x1D = buildOctet (x0, x0, x0, x1, x1, x1, x0, x1) ;
  x1E = buildOctet (x0, x0, x0, x1, x1, x1, x1, x0) ;
  x1F = buildOctet (x0, x0, x0, x1, x1, x1, x1, x1) ;
  x20 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x0) ;
  x21 = buildOctet (x0, x0, x1, x0, x0, x0, x0, x1) ;
  x22 = buildOctet (x0, x0, x1, x0, x0, x0, x1, x0) ;
  x23 = buildOctet (x0, x0, x1, x0, x0, x0, x1, x1) ;
  x24 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x0) ;
  x25 = buildOctet (x0, x0, x1, x0, x0, x1, x0, x1) ;
  x26 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x0) ;
  x27 = buildOctet (x0, x0, x1, x0, x0, x1, x1, x1) ;
  x28 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x0) ;
  x29 = buildOctet (x0, x0, x1, x0, x1, x0, x0, x1) ;
  x2A = buildOctet (x0, x0, x1, x0, x1, x0, x1, x0) ;
  x2B = buildOctet (x0, x0, x1, x0, x1, x0, x1, x1) ;
  x2C = buildOctet (x0, x0, x1, x0, x1, x1, x0, x0) ;
  x2D = buildOctet (x0, x0, x1, x0, x1, x1, x0, x1) ;
  x2E = buildOctet (x0, x0, x1, x0, x1, x1, x1, x0) ;
  x2F = buildOctet (x0, x0, x1, x0, x1, x1, x1, x1) ;
  x30 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x0) ;
  x31 = buildOctet (x0, x0, x1, x1, x0, x0, x0, x1) ;
  x32 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x0) ;
  x33 = buildOctet (x0, x0, x1, x1, x0, x0, x1, x1) ;
  x34 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x0) ;
  x35 = buildOctet (x0, x0, x1, x1, x0, x1, x0, x1) ;
  x36 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x0) ;
  x37 = buildOctet (x0, x0, x1, x1, x0, x1, x1, x1) ;
  x38 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x0) ;
  x39 = buildOctet (x0, x0, x1, x1, x1, x0, x0, x1) ;
  x3A = buildOctet (x0, x0, x1, x1, x1, x0, x1, x0) ;
  x3B = buildOctet (x0, x0, x1, x1, x1, x0, x1, x1) ;
  x3C = buildOctet (x0, x0, x1, x1, x1, x1, x0, x0) ;
  x3D = buildOctet (x0, x0, x1, x1, x1, x1, x0, x1) ;
  x3E = buildOctet (x0, x0, x1, x1, x1, x1, x1, x0) ;
  x3F = buildOctet (x0, x0, x1, x1, x1, x1, x1, x1) ;
  x40 = buildOctet (x0, x1, x0, x0, x0, x0, x0, x0) ;
  x41 = buildOctet (x0, x1, x0, x0, x0, x0, x0, x1) ;
  x42 = buildOctet (x0, x1, x0, x0, x0, x0, x1, x0) ;
  x43 = buildOctet (x0, x1, x0, x0, x0, x0, x1, x1) ;
  x44 = buildOctet (x0, x1, x0, x0, x0, x1, x0, x0) ;
  x45 = buildOctet (x0, x1, x0, x0, x0, x1, x0, x1) ;
  x46 = buildOctet (x0, x1, x0, x0, x0, x1, x1, x0) ;
  x47 = buildOctet (x0, x1, x0, x0, x0, x1, x1, x1) ;
  x48 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x0) ;
  x49 = buildOctet (x0, x1, x0, x0, x1, x0, x0, x1) ;
  x4A = buildOctet (x0, x1, x0, x0, x1, x0, x1, x0) ;
  x4B = buildOctet (x0, x1, x0, x0, x1, x0, x1, x1) ;
  x4C = buildOctet (x0, x1, x0, x0, x1, x1, x0, x0) ;
  x4D = buildOctet (x0, x1, x0, x0, x1, x1, x0, x1) ;
  x4E = buildOctet (x0, x1, x0, x0, x1, x1, x1, x0) ;
  x4F = buildOctet (x0, x1, x0, x0, x1, x1, x1, x1) ;
  x50 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x0) ;
  x51 = buildOctet (x0, x1, x0, x1, x0, x0, x0, x1) ;
  x52 = buildOctet (x0, x1, x0, x1, x0, x0, x1, x0) ;
  x53 = buildOctet (x0, x1, x0, x1, x0, x0, x1, x1) ;
  x54 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x0) ;
  x55 = buildOctet (x0, x1, x0, x1, x0, x1, x0, x1) ;
  x56 = buildOctet (x0, x1, x0, x1, x0, x1, x1, x0) ;
  x57 = buildOctet (x0, x1, x0, x1, x0, x1, x1, x1) ;
  x58 = buildOctet (x0, x1, x0, x1, x1, x0, x0, x0) ;
  x59 = buildOctet (x0, x1, x0, x1, x1, x0, x0, x1) ;
  x5A = buildOctet (x0, x1, x0, x1, x1, x0, x1, x0) ;
  x5B = buildOctet (x0, x1, x0, x1, x1, x0, x1, x1) ;
  x5C = buildOctet (x0, x1, x0, x1, x1, x1, x0, x0) ;
  x5D = buildOctet (x0, x1, x0, x1, x1, x1, x0, x1) ;
  x5E = buildOctet (x0, x1, x0, x1, x1, x1, x1, x0) ;
  x5F = buildOctet (x0, x1, x0, x1, x1, x1, x1, x1) ;
  x60 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x0) ;
  x61 = buildOctet (x0, x1, x1, x0, x0, x0, x0, x1) ;
  x62 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x0) ;
  x63 = buildOctet (x0, x1, x1, x0, x0, x0, x1, x1) ;
  x64 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x0) ;
  x65 = buildOctet (x0, x1, x1, x0, x0, x1, x0, x1) ;
  x66 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x0) ;
  x67 = buildOctet (x0, x1, x1, x0, x0, x1, x1, x1) ;
  x68 = buildOctet (x0, x1, x1, x0, x1, x0, x0, x0) ;
  x69 = buildOctet (x0, x1, x1, x0, x1, x0, x0, x1) ;
  x6A = buildOctet (x0, x1, x1, x0, x1, x0, x1, x0) ;
  x6B = buildOctet (x0, x1, x1, x0, x1, x0, x1, x1) ;
  x6C = buildOctet (x0, x1, x1, x0, x1, x1, x0, x0) ;
  x6D = buildOctet (x0, x1, x1, x0, x1, x1, x0, x1) ;
  x6E = buildOctet (x0, x1, x1, x0, x1, x1, x1, x0) ;
  x6F = buildOctet (x0, x1, x1, x0, x1, x1, x1, x1) ;
  x70 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x0) ;
  x71 = buildOctet (x0, x1, x1, x1, x0, x0, x0, x1) ;
  x72 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x0) ;
  x73 = buildOctet (x0, x1, x1, x1, x0, x0, x1, x1) ;
  x74 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x0) ;
  x75 = buildOctet (x0, x1, x1, x1, x0, x1, x0, x1) ;
  x76 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x0) ;
  x77 = buildOctet (x0, x1, x1, x1, x0, x1, x1, x1) ;
  x78 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x0) ;
  x79 = buildOctet (x0, x1, x1, x1, x1, x0, x0, x1) ;
  x7A = buildOctet (x0, x1, x1, x1, x1, x0, x1, x0) ;
  x7B = buildOctet (x0, x1, x1, x1, x1, x0, x1, x1) ;
  x7C = buildOctet (x0, x1, x1, x1, x1, x1, x0, x0) ;
  x7D = buildOctet (x0, x1, x1, x1, x1, x1, x0, x1) ;
  x7E = buildOctet (x0, x1, x1, x1, x1, x1, x1, x0) ;
  x7F = buildOctet (x0, x1, x1, x1, x1, x1, x1, x1) ;
  x80 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x0) ;
  x81 = buildOctet (x1, x0, x0, x0, x0, x0, x0, x1) ;
  x82 = buildOctet (x1, x0, x0, x0, x0, x0, x1, x0) ;
  x83 = buildOctet (x1, x0, x0, x0, x0, x0, x1, x1) ;
  x84 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x0) ;
  x85 = buildOctet (x1, x0, x0, x0, x0, x1, x0, x1) ;
  x86 = buildOctet (x1, x0, x0, x0, x0, x1, x1, x0) ;
  x87 = buildOctet (x1, x0, x0, x0, x0, x1, x1, x1) ;
  x88 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x0) ;
  x89 = buildOctet (x1, x0, x0, x0, x1, x0, x0, x1) ;
  x8A = buildOctet (x1, x0, x0, x0, x1, x0, x1, x0) ;
  x8B = buildOctet (x1, x0, x0, x0, x1, x0, x1, x1) ;
  x8C = buildOctet (x1, x0, x0, x0, x1, x1, x0, x0) ;
  x8D = buildOctet (x1, x0, x0, x0, x1, x1, x0, x1) ;
  x8E = buildOctet (x1, x0, x0, x0, x1, x1, x1, x0) ;
  x8F = buildOctet (x1, x0, x0, x0, x1, x1, x1, x1) ;
  x90 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x0) ;
  x91 = buildOctet (x1, x0, x0, x1, x0, x0, x0, x1) ;
  x92 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x0) ;
  x93 = buildOctet (x1, x0, x0, x1, x0, x0, x1, x1) ;
  x94 = buildOctet (x1, x0, x0, x1, x0, x1, x0, x0) ;
  x95 = buildOctet (x1, x0, x0, x1, x0, x1, x0, x1) ;
  x96 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x0) ;
  x97 = buildOctet (x1, x0, x0, x1, x0, x1, x1, x1) ;
  x98 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x0) ;
  x99 = buildOctet (x1, x0, x0, x1, x1, x0, x0, x1) ;
  x9A = buildOctet (x1, x0, x0, x1, x1, x0, x1, x0) ;
  x9B = buildOctet (x1, x0, x0, x1, x1, x0, x1, x1) ;
  x9C = buildOctet (x1, x0, x0, x1, x1, x1, x0, x0) ;
  x9D = buildOctet (x1, x0, x0, x1, x1, x1, x0, x1) ;
  x9E = buildOctet (x1, x0, x0, x1, x1, x1, x1, x0) ;
  x9F = buildOctet (x1, x0, x0, x1, x1, x1, x1, x1) ;
  xA1 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x1) ;
  xA0 = buildOctet (x1, x0, x1, x0, x0, x0, x0, x0) ;
  xA2 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x0) ;
  xA3 = buildOctet (x1, x0, x1, x0, x0, x0, x1, x1) ;
  xA4 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x0) ;
  xA5 = buildOctet (x1, x0, x1, x0, x0, x1, x0, x1) ;
  xA6 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x0) ;
  xA7 = buildOctet (x1, x0, x1, x0, x0, x1, x1, x1) ;
  xA8 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x0) ;
  xA9 = buildOctet (x1, x0, x1, x0, x1, x0, x0, x1) ;
  xAA = buildOctet (x1, x0, x1, x0, x1, x0, x1, x0) ;
  xAB = buildOctet (x1, x0, x1, x0, x1, x0, x1, x1) ;
  xAC = buildOctet (x1, x0, x1, x0, x1, x1, x0, x0) ;
  xAD = buildOctet (x1, x0, x1, x0, x1, x1, x0, x1) ;
  xAE = buildOctet (x1, x0, x1, x0, x1, x1, x1, x0) ;
  xAF = buildOctet (x1, x0, x1, x0, x1, x1, x1, x1) ;
  xB0 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x0) ;
  xB1 = buildOctet (x1, x0, x1, x1, x0, x0, x0, x1) ;
  xB2 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x0) ;
  xB3 = buildOctet (x1, x0, x1, x1, x0, x0, x1, x1) ;
  xB4 = buildOctet (x1, x0, x1, x1, x0, x1, x0, x0) ;
  xB5 = buildOctet (x1, x0, x1, x1, x0, x1, x0, x1) ;
  xB6 = buildOctet (x1, x0, x1, x1, x0, x1, x1, x0) ;
  xB7 = buildOctet (x1, x0, x1, x1, x0, x1, x1, x1) ;
  xB8 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x0) ;
  xB9 = buildOctet (x1, x0, x1, x1, x1, x0, x0, x1) ;
  xBA = buildOctet (x1, x0, x1, x1, x1, x0, x1, x0) ;
  xBB = buildOctet (x1, x0, x1, x1, x1, x0, x1, x1) ;
  xBC = buildOctet (x1, x0, x1, x1, x1, x1, x0, x0) ;
  xBD = buildOctet (x1, x0, x1, x1, x1, x1, x0, x1) ;
  xBE = buildOctet (x1, x0, x1, x1, x1, x1, x1, x0) ;
  xBF = buildOctet (x1, x0, x1, x1, x1, x1, x1, x1) ;
  xC0 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x0) ;
  xC1 = buildOctet (x1, x1, x0, x0, x0, x0, x0, x1) ;
  xC2 = buildOctet (x1, x1, x0, x0, x0, x0, x1, x0) ;
  xC3 = buildOctet (x1, x1, x0, x0, x0, x0, x1, x1) ;
  xC4 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x0) ;
  xC5 = buildOctet (x1, x1, x0, x0, x0, x1, x0, x1) ;
  xC6 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x0) ;
  xC7 = buildOctet (x1, x1, x0, x0, x0, x1, x1, x1) ;
  xC8 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x0) ;
  xC9 = buildOctet (x1, x1, x0, x0, x1, x0, x0, x1) ;
  xCA = buildOctet (x1, x1, x0, x0, x1, x0, x1, x0) ;
  xCB = buildOctet (x1, x1, x0, x0, x1, x0, x1, x1) ;
  xCC = buildOctet (x1, x1, x0, x0, x1, x1, x0, x0) ;
  xCD = buildOctet (x1, x1, x0, x0, x1, x1, x0, x1) ;
  xCE = buildOctet (x1, x1, x0, x0, x1, x1, x1, x0) ;
  xCF = buildOctet (x1, x1, x0, x0, x1, x1, x1, x1) ;
  xD0 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x0) ;
  xD1 = buildOctet (x1, x1, x0, x1, x0, x0, x0, x1) ;
  xD2 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x0) ;
  xD3 = buildOctet (x1, x1, x0, x1, x0, x0, x1, x1) ;
  xD4 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x0) ;
  xD5 = buildOctet (x1, x1, x0, x1, x0, x1, x0, x1) ;
  xD6 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x0) ;
  xD7 = buildOctet (x1, x1, x0, x1, x0, x1, x1, x1) ;
  xD8 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x0) ;
  xD9 = buildOctet (x1, x1, x0, x1, x1, x0, x0, x1) ;
  xDA = buildOctet (x1, x1, x0, x1, x1, x0, x1, x0) ;
  xDB = buildOctet (x1, x1, x0, x1, x1, x0, x1, x1) ;
  xDC = buildOctet (x1, x1, x0, x1, x1, x1, x0, x0) ;
  xDD = buildOctet (x1, x1, x0, x1, x1, x1, x0, x1) ;
  xDE = buildOctet (x1, x1, x0, x1, x1, x1, x1, x0) ;
  xDF = buildOctet (x1, x1, x0, x1, x1, x1, x1, x1) ;
  xE0 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x0) ;
  xE1 = buildOctet (x1, x1, x1, x0, x0, x0, x0, x1) ;
  xE2 = buildOctet (x1, x1, x1, x0, x0, x0, x1, x0) ;
  xE3 = buildOctet (x1, x1, x1, x0, x0, x0, x1, x1) ;
  xE4 = buildOctet (x1, x1, x1, x0, x0, x1, x0, x0) ;
  xE5 = buildOctet (x1, x1, x1, x0, x0, x1, x0, x1) ;
  xE6 = buildOctet (x1, x1, x1, x0, x0, x1, x1, x0) ;
  xE7 = buildOctet (x1, x1, x1, x0, x0, x1, x1, x1) ;
  xE8 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x0) ;
  xE9 = buildOctet (x1, x1, x1, x0, x1, x0, x0, x1) ;
  xEA = buildOctet (x1, x1, x1, x0, x1, x0, x1, x0) ;
  xEB = buildOctet (x1, x1, x1, x0, x1, x0, x1, x1) ;
  xEC = buildOctet (x1, x1, x1, x0, x1, x1, x0, x0) ;
  xED = buildOctet (x1, x1, x1, x0, x1, x1, x0, x1) ;
  xEE = buildOctet (x1, x1, x1, x0, x1, x1, x1, x0) ;
  xEF = buildOctet (x1, x1, x1, x0, x1, x1, x1, x1) ;
  xF0 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x0) ;
  xF1 = buildOctet (x1, x1, x1, x1, x0, x0, x0, x1) ;
  xF2 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x0) ;
  xF3 = buildOctet (x1, x1, x1, x1, x0, x0, x1, x1) ;
  xF4 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x0) ;
  xF5 = buildOctet (x1, x1, x1, x1, x0, x1, x0, x1) ;
  xF6 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x0) ;
  xF7 = buildOctet (x1, x1, x1, x1, x0, x1, x1, x1) ;
  xF8 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x0) ;
  xF9 = buildOctet (x1, x1, x1, x1, x1, x0, x0, x1) ;
  xFA = buildOctet (x1, x1, x1, x1, x1, x0, x1, x0) ;
  xFB = buildOctet (x1, x1, x1, x1, x1, x0, x1, x1) ;
  xFC = buildOctet (x1, x1, x1, x1, x1, x1, x0, x0) ;
  xFD = buildOctet (x1, x1, x1, x1, x1, x1, x0, x1) ;
  xFE = buildOctet (x1, x1, x1, x1, x1, x1, x1, x0) ;
  xFF = buildOctet (x1, x1, x1, x1, x1, x1, x1, x1) ;
  eqOctetSum (buildOctetSum (B, O), buildOctetSum (B_prime, O_prime)) = andBool (eqBit (B, B_prime), eqOctet (O, O_prime)) ;
  addBit (B, B_prime, Bcarry) = xorBit (xorBit (B, B_prime), Bcarry) ;
  carBit (B, B_prime, Bcarry) = orBit (andBit (andBit (B, B_prime), notBit (Bcarry)), andBit (orBit (B, B_prime), Bcarry)) ;
  addOctetSum (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B_prime1, B_prime2, B_prime3, B_prime4, B_prime5, B_prime6, B_prime7, B_prime8), Bcarry) = addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) ;
  addOctet8 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, B8, B_prime8, Bcarry) = addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, carBit (B8, B_prime8, Bcarry), addBit (B8, B_prime8, Bcarry)) ;
  addOctet7 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, B7, B_prime7, Bcarry, B_second8) = addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, carBit (B7, B_prime7, Bcarry), addBit (B7, B_prime7, Bcarry), B_second8) ;
  addOctet6 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, B6, B_prime6, Bcarry, B_second7, B_second8) = addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, carBit (B6, B_prime6, Bcarry), addBit (B6, B_prime6, Bcarry), B_second7, B_second8) ;
  addOctet5 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, B5, B_prime5, Bcarry, B_second6, B_second7, B_second8) = addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, carBit (B5, B_prime5, Bcarry), addBit (B5, B_prime5, Bcarry), B_second6, B_second7, B_second8) ;
  addOctet4 (B1, B_prime1, B2, B_prime2, B3, B_prime3, B4, B_prime4, Bcarry, B_second5, B_second6, B_second7, B_second8) = addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, carBit (B4, B_prime4, Bcarry), addBit (B4, B_prime4, Bcarry), B_second5, B_second6, B_second7, B_second8) ;
  addOctet3 (B1, B_prime1, B2, B_prime2, B3, B_prime3, Bcarry, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet2 (B1, B_prime1, B2, B_prime2, carBit (B3, B_prime3, Bcarry), addBit (B3, B_prime3, Bcarry), B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet2 (B1, B_prime1, B2, B_prime2, Bcarry, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet1 (B1, B_prime1, carBit (B2, B_prime2, Bcarry), addBit (B2, B_prime2, Bcarry), B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet1 (B1, B_prime1, Bcarry, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = addOctet0 (carBit (B1, B_prime1, Bcarry), addBit (B1, B_prime1, Bcarry), B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) ;
  addOctet0 (Bcarry, B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8) = buildOctetSum (Bcarry, buildOctet (B_second1, B_second2, B_second3, B_second4, B_second5, B_second6, B_second7, B_second8)) ;
  dropCarryOctetSum (buildOctetSum (Bcarry, O)) = O ;
  addOctet (O, O_prime) = dropCarryOctetSum (addOctetSum (O, O_prime, x0)) ;
  eqHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)) ;
  x0000 = buildHalf (x00, x00) ;
  x0001 = buildHalf (x00, x01) ;
  mulOctet (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), O_prime) = mulOctet1 (B1, B2, B3, B4, B5, B6, B7, B8, O_prime, x0000) ;
  mulOctet1 (x0, B2, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet1 (x1, B2, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet2 (B2, B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet1 (O_prime), leftOctet7 (O_prime))) ;
  mulOctet2 (x0, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet2 (x1, B3, B4, B5, B6, B7, B8, O_prime, H) = mulOctet3 (B3, B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet2 (O_prime), leftOctet6 (O_prime))) ;
  mulOctet3 (x0, B4, B5, B6, B7, B8, O_prime, H) = mulOctet4 (B4, B5, B6, B7, B8, O_prime, H) ;
  mulOctet3 (x1, B4, B5, B6, B7, B8, O_prime, H) = mulOctet4 (B4, B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet3 (O_prime), leftOctet5 (O_prime))) ;
  mulOctet4 (x0, B5, B6, B7, B8, O_prime, H) = mulOctet5 (B5, B6, B7, B8, O_prime, H) ;
  mulOctet4 (x1, B5, B6, B7, B8, O_prime, H) = mulOctet5 (B5, B6, B7, B8, O_prime, mulOctetA (H, rightOctet4 (O_prime), leftOctet4 (O_prime))) ;
  mulOctet5 (x0, B6, B7, B8, O_prime, H) = mulOctet6 (B6, B7, B8, O_prime, H) ;
  mulOctet5 (x1, B6, B7, B8, O_prime, H) = mulOctet6 (B6, B7, B8, O_prime, mulOctetA (H, rightOctet5 (O_prime), leftOctet3 (O_prime))) ;
  mulOctet6 (x0, B7, B8, O_prime, H) = mulOctet7 (B7, B8, O_prime, H) ;
  mulOctet6 (x1, B7, B8, O_prime, H) = mulOctet7 (B7, B8, O_prime, mulOctetA (H, rightOctet6 (O_prime), leftOctet2 (O_prime))) ;
  mulOctet7 (x0, B8, O_prime, H) = mulOctet8 (B8, O_prime, H) ;
  mulOctet7 (x1, B8, O_prime, H) = mulOctet8 (B8, O_prime, mulOctetA (H, rightOctet7 (O_prime), leftOctet1 (O_prime))) ;
  mulOctet8 (x0, O_prime, H) = H ;
  mulOctet8 (x1, O_prime, H) = mulOctetA (H, x00, O_prime) ;
  mulOctetA (buildHalf (O1, O2), O_prime1, O_prime2) = mulOctetB (addOctet (O1, O_prime1), addOctetSum (O2, O_prime2, x0)) ;
  mulOctetB (O1, buildOctetSum (x0, O2)) = buildHalf (O1, O2) ;
  mulOctetB (O1, buildOctetSum (x1, O2)) = buildHalf (addOctet (O1, x01), O2) ;
  eqHalfSum (buildHalfSum (B, H), buildHalfSum (B_prime, H_prime)) = andBool (eqBit (B, B_prime), eqHalf (H, H_prime)) ;
  addHalfSum (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = addHalf2 (O1, O_prime1, O2, O_prime2) ;
  addHalf2 (O1, O_prime1, O2, O_prime2) = addHalf1 (O1, O_prime1, addOctetSum (O2, O_prime2, x0)) ;
  addHalf1 (O1, O_prime1, buildOctetSum (B, O_second2)) = addHalf0 (addOctetSum (O1, O_prime1, B), O_second2) ;
  addHalf0 (buildOctetSum (B, O_second1), O_second2) = buildHalfSum (B, buildHalf (O_second1, O_second2)) ;
  dropCarryHalfSum (buildHalfSum (B, H)) = H ;
  addHalf (H, H_prime) = dropCarryHalfSum (addHalfSum (H, H_prime)) ;
  addHalfOctet (O, H) = addHalf (buildHalf (x00, O), H) ;
  addHalfOctets (O, O_prime) = addHalf (buildHalf (x00, O), buildHalf (x00, O_prime)) ;
  eqBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = andBool (andBool (eqOctet (O1, O_prime1), eqOctet (O2, O_prime2)), andBool (eqOctet (O3, O_prime3), eqOctet (O4, O_prime4))) ;
  andBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (andOctet (O1, O_prime1), andOctet (O2, O_prime2), andOctet (O3, O_prime3), andOctet (O4, O_prime4)) ;
  orBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (orOctet (O1, O_prime1), orOctet (O2, O_prime2), orOctet (O3, O_prime3), orOctet (O4, O_prime4)) ;
  xorBlock (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildBlock (xorOctet (O1, O_prime1), xorOctet (O2, O_prime2), xorOctet (O3, O_prime3), xorOctet (O4, O_prime4)) ;
  HalfU (buildBlock (O1, O2, O3, O4)) = buildHalf (O1, O2) ;
  HalfL (buildBlock (O1, O2, O3, O4)) = buildHalf (O3, O4) ;
  mulHalf (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = mulHalfA (mulOctet (O1, O_prime1), mulOctet (O1, O_prime2), mulOctet (O2, O_prime1), mulOctet (O2, O_prime2)) ;
  mulHalfA (buildHalf (O11U, O11L), buildHalf (O12U, O12L), buildHalf (O21U, O21L), buildHalf (O22U, O22L)) = mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O22L) ;
  mulHalf4 (O11U, O11L, O12U, O12L, O21U, O21L, O22U, O_second4) = mulHalf3 (O11U, O11L, O12U, O21U, addHalfOctet (O12L, addHalfOctets (O21L, O22U)), O_second4) ;
  mulHalf3 (O11U, O11L, O12U, O21U, buildHalf (Ocarry, O_second3), O_second4) = mulHalf2 (O11U, addHalfOctet (Ocarry, addHalfOctet (O11L, addHalfOctets (O12U, O21U))), O_second3, O_second4) ;
  mulHalf2 (O11U, buildHalf (Ocarry, O_second2), O_second3, O_second4) = mulHalf1 (addHalfOctets (Ocarry, O11U), O_second2, O_second3, O_second4) ;
  mulHalf1 (buildHalf (Ocarry, O_second1), O_second2, O_second3, O_second4) = buildBlock (O_second1, O_second2, O_second3, O_second4) ;
  eqBlockSum (buildBlockSum (B, W), buildBlockSum (B_prime, W_prime)) = andBool (eqBit (B, B_prime), eqBlock (W, W_prime)) ;
  addBlockSum (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) ;
  addBlock4 (O1, O_prime1, O2, O_prime2, O3, O_prime3, O4, O_prime4) = addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, addOctetSum (O4, O_prime4, x0)) ;
  addBlock3 (O1, O_prime1, O2, O_prime2, O3, O_prime3, buildOctetSum (Bcarry, O_second4)) = addBlock2 (O1, O_prime1, O2, O_prime2, addOctetSum (O3, O_prime3, Bcarry), O_second4) ;
  addBlock2 (O1, O_prime1, O2, O_prime2, buildOctetSum (Bcarry, O_second3), O_second4) = addBlock1 (O1, O_prime1, addOctetSum (O2, O_prime2, Bcarry), O_second3, O_second4) ;
  addBlock1 (O1, O_prime1, buildOctetSum (Bcarry, O_second2), O_second3, O_second4) = addBlock0 (addOctetSum (O1, O_prime1, Bcarry), O_second2, O_second3, O_second4) ;
  addBlock0 (buildOctetSum (Bcarry, O_second1), O_second2, O_second3, O_second4) = buildBlockSum (Bcarry, buildBlock (O_second1, O_second2, O_second3, O_second4)) ;
  dropCarryBlockSum (buildBlockSum (Bcarry, W)) = W ;
  addBlock (W, W_prime) = dropCarryBlockSum (addBlockSum (W, W_prime)) ;
  addBlockHalf (buildHalf (O1, O2), W) = addBlock (buildBlock (x00, x00, O1, O2), W) ;
  addBlockHalves (buildHalf (O1, O2), buildHalf (O_prime1, O_prime2)) = addBlock (buildBlock (x00, x00, O1, O2), buildBlock (x00, x00, O_prime1, O_prime2)) ;
  eqPair (buildPair (W1, W2), buildPair (W_prime1, W_prime2)) = andBool (eqBlock (W1, W_prime1), eqBlock (W2, W_prime2)) ;
  mulBlock (W1, W2) = mulBlockA (mulHalf (HalfU (W1), HalfU (W2)), mulHalf (HalfU (W1), HalfL (W2)), mulHalf (HalfL (W1), HalfU (W2)), mulHalf (HalfL (W1), HalfL (W2))) ;
  mulBlockA (W11, W12, W21, W22) = mulBlock4 (HalfU (W11), HalfL (W11), HalfU (W12), HalfL (W12), HalfU (W21), HalfL (W21), HalfU (W22), HalfL (W22)) ;
  mulBlock4 (H11U, H11L, H12U, H12L, H21U, H21L, H22U, H_second4) = mulBlock3 (H11U, H11L, H12U, H21U, addBlockHalf (H12L, addBlockHalves (H21L, H22U)), H_second4) ;
  mulBlock3 (H11U, H11L, H12U, H21U, W, H_second4) = mulBlock2 (H11U, addBlockHalf (HalfU (W), addBlockHalf (H11L, addBlockHalves (H12U, H21U))), HalfL (W), H_second4) ;
  mulBlock2 (H11U, W, H_second3, H_second4) = mulBlock1 (addBlockHalves (HalfU (W), H11U), HalfL (W), H_second3, H_second4) ;
  mulBlock1 (W, H_second2, H_second3, H_second4) = mulBlockB (HalfL (W), H_second2, H_second3, H_second4) ;
  mulBlockB (buildHalf (O1U, O1L), buildHalf (O2U, O2L), buildHalf (O3U, O3L), buildHalf (O4U, O4L)) = buildPair (buildBlock (O1U, O1L, O2U, O2L), buildBlock (O3U, O3L, O4U, O4L)) ;
  n254 = addNat (n12, mulNat (n11, n22)) ;
  n256 = mulNat (n16, n16) ;
  n4100 = addNat (n4, mulNat (n16, n256)) ;
  x00000000 = buildBlock (x00, x00, x00, x00) ;
  x00000001 = buildBlock (x00, x00, x00, x01) ;
  x00000002 = buildBlock (x00, x00, x00, x02) ;
  x00000003 = buildBlock (x00, x00, x00, x03) ;
  x00000004 = buildBlock (x00, x00, x00, x04) ;
  x00000005 = buildBlock (x00, x00, x00, x05) ;
  x00000006 = buildBlock (x00, x00, x00, x06) ;
  x00000007 = buildBlock (x00, x00, x00, x07) ;
  x00000008 = buildBlock (x00, x00, x00, x08) ;
  x00000009 = buildBlock (x00, x00, x00, x09) ;
  x0000000A = buildBlock (x00, x00, x00, x0A) ;
  x0000000B = buildBlock (x00, x00, x00, x0B) ;
  x0000000C = buildBlock (x00, x00, x00, x0C) ;
  x0000000D = buildBlock (x00, x00, x00, x0D) ;
  x0000000E = buildBlock (x00, x00, x00, x0E) ;
  x0000000F = buildBlock (x00, x00, x00, x0F) ;
  x00000010 = buildBlock (x00, x00, x00, x10) ;
  x00000012 = buildBlock (x00, x00, x00, x12) ;
  x00000014 = buildBlock (x00, x00, x00, x14) ;
  x00000016 = buildBlock (x00, x00, x00, x16) ;
  x00000018 = buildBlock (x00, x00, x00, x18) ;
  x0000001B = buildBlock (x00, x00, x00, x1B) ;
  x0000001D = buildBlock (x00, x00, x00, x1D) ;
  x0000001E = buildBlock (x00, x00, x00, x1E) ;
  x0000001F = buildBlock (x00, x00, x00, x1F) ;
  x00000031 = buildBlock (x00, x00, x00, x31) ;
  x00000036 = buildBlock (x00, x00, x00, x36) ;
  x00000060 = buildBlock (x00, x00, x00, x60) ;
  x00000080 = buildBlock (x00, x00, x00, x80) ;
  x000000A5 = buildBlock (x00, x00, x00, xA5) ;
  x000000B6 = buildBlock (x00, x00, x00, xB6) ;
  x000000C4 = buildBlock (x00, x00, x00, xC4) ;
  x000000D2 = buildBlock (x00, x00, x00, xD2) ;
  x00000100 = buildBlock (x00, x00, x01, x00) ;
  x00000129 = buildBlock (x00, x00, x01, x29) ;
  x0000018C = buildBlock (x00, x00, x01, x8C) ;
  x00004000 = buildBlock (x00, x00, x40, x00) ;
  x00010000 = buildBlock (x00, x01, x00, x00) ;
  x00020000 = buildBlock (x00, x02, x00, x00) ;
  x00030000 = buildBlock (x00, x03, x00, x00) ;
  x00040000 = buildBlock (x00, x04, x00, x00) ;
  x00060000 = buildBlock (x00, x06, x00, x00) ;
  x00804021 = buildBlock (x00, x80, x40, x21) ;
  x00FF00FF = buildBlock (x00, xFF, x00, xFF) ;
  x0103050B = buildBlock (x01, x03, x05, x0B) ;
  x01030703 = buildBlock (x01, x03, x07, x03) ;
  x01030705 = buildBlock (x01, x03, x07, x05) ;
  x0103070F = buildBlock (x01, x03, x07, x0F) ;
  x02040801 = buildBlock (x02, x04, x08, x01) ;
  x0297AF6F = buildBlock (x02, x97, xAF, x6F) ;
  x07050301 = buildBlock (x07, x05, x03, x01) ;
  x077788A2 = buildBlock (x07, x77, x88, xA2) ;
  x07C72EAA = buildBlock (x07, xC7, x2E, xAA) ;
  x0A202020 = buildBlock (x0A, x20, x20, x20) ;
  x0AD67E20 = buildBlock (x0A, xD6, x7E, x20) ;
  x10000000 = buildBlock (x10, x00, x00, x00) ;
  x11A9D254 = buildBlock (x11, xA9, xD2, x54) ;
  x11AC46B8 = buildBlock (x11, xAC, x46, xB8) ;
  x1277A6D4 = buildBlock (x12, x77, xA6, xD4) ;
  x13647149 = buildBlock (x13, x64, x71, x49) ;
  x160EE9B5 = buildBlock (x16, x0E, xE9, xB5) ;
  x17065DBB = buildBlock (x17, x06, x5D, xBB) ;
  x17A808FD = buildBlock (x17, xA8, x08, xFD) ;
  x1D10D8D3 = buildBlock (x1D, x10, xD8, xD3) ;
  x1D3B7760 = buildBlock (x1D, x3B, x77, x60) ;
  x1D9C9655 = buildBlock (x1D, x9C, x96, x55) ;
  x1F3F7FFF = buildBlock (x1F, x3F, x7F, xFF) ;
  x204E80A7 = buildBlock (x20, x4E, x80, xA7) ;
  x21D869BA = buildBlock (x21, xD8, x69, xBA) ;
  x24B66FB5 = buildBlock (x24, xB6, x6F, xB5) ;
  x270EEDAF = buildBlock (x27, x0E, xED, xAF) ;
  x277B4B25 = buildBlock (x27, x7B, x4B, x25) ;
  x2829040B = buildBlock (x28, x29, x04, x0B) ;
  x288FC786 = buildBlock (x28, x8F, xC7, x86) ;
  x28EAD8B3 = buildBlock (x28, xEA, xD8, xB3) ;
  x29907CD8 = buildBlock (x29, x90, x7C, xD8) ;
  x29C1485F = buildBlock (x29, xC1, x48, x5F) ;
  x29EEE96B = buildBlock (x29, xEE, xE9, x6B) ;
  x2A6091AE = buildBlock (x2A, x60, x91, xAE) ;
  x2BF8499A = buildBlock (x2B, xF8, x49, x9A) ;
  x2E80AC30 = buildBlock (x2E, x80, xAC, x30) ;
  x2FD76FFB = buildBlock (x2F, xD7, x6F, xFB) ;
  x30261492 = buildBlock (x30, x26, x14, x92) ;
  x303FF4AA = buildBlock (x30, x3F, xF4, xAA) ;
  x33D5A466 = buildBlock (x33, xD5, xA4, x66) ;
  x344925FC = buildBlock (x34, x49, x25, xFC) ;
  x34ACF886 = buildBlock (x34, xAC, xF8, x86) ;
  x3CD54DEB = buildBlock (x3C, xD5, x4D, xEB) ;
  x3CF3A7D2 = buildBlock (x3C, xF3, xA7, xD2) ;
  x3DD81AC6 = buildBlock (x3D, xD8, x1A, xC6) ;
  x3F6F7248 = buildBlock (x3F, x6F, x72, x48) ;
  x48B204D6 = buildBlock (x48, xB2, x04, xD6) ;
  x4A645A01 = buildBlock (x4A, x64, x5A, x01) ;
  x4C49AAE0 = buildBlock (x4C, x49, xAA, xE0) ;
  x4CE933E1 = buildBlock (x4C, xE9, x33, xE1) ;
  x4D53901A = buildBlock (x4D, x53, x90, x1A) ;
  x4DA124A1 = buildBlock (x4D, xA1, x24, xA1) ;
  x4F998E01 = buildBlock (x4F, x99, x8E, x01) ;
  x4FB1138A = buildBlock (x4F, xB1, x13, x8A) ;
  x50DEC930 = buildBlock (x50, xDE, xC9, x30) ;
  x51AF3C1D = buildBlock (x51, xAF, x3C, x1D) ;
  x51EDE9C7 = buildBlock (x51, xED, xE9, xC7) ;
  x550D91CE = buildBlock (x55, x0D, x91, xCE) ;
  x55555555 = buildBlock (x55, x55, x55, x55) ;
  x55DD063F = buildBlock (x55, xDD, x06, x3F) ;
  x5834A585 = buildBlock (x58, x34, xA5, x85) ;
  x5A35D667 = buildBlock (x5A, x35, xD6, x67) ;
  x5BC02502 = buildBlock (x5B, xC0, x25, x02) ;
  x5CCA3239 = buildBlock (x5C, xCA, x32, x39) ;
  x5EBA06C2 = buildBlock (x5E, xBA, x06, xC2) ;
  x5F38EEF1 = buildBlock (x5F, x38, xEE, xF1) ;
  x613F8E2A = buildBlock (x61, x3F, x8E, x2A) ;
  x63C70DBA = buildBlock (x63, xC7, x0D, xBA) ;
  x6AD6E8A4 = buildBlock (x6A, xD6, xE8, xA4) ;
  x6AEBACF8 = buildBlock (x6A, xEB, xAC, xF8) ;
  x6D67E884 = buildBlock (x6D, x67, xE8, x84) ;
  x7050EC5E = buildBlock (x70, x50, xEC, x5E) ;
  x717153D5 = buildBlock (x71, x71, x53, xD5) ;
  x7201F4DC = buildBlock (x72, x01, xF4, xDC) ;
  x7397C9AE = buildBlock (x73, x97, xC9, xAE) ;
  x74B39176 = buildBlock (x74, xB3, x91, x76) ;
  x76232E5F = buildBlock (x76, x23, x2E, x5F) ;
  x7783C51D = buildBlock (x77, x83, xC5, x1D) ;
  x7792F9D4 = buildBlock (x77, x92, xF9, xD4) ;
  x7BC180AB = buildBlock (x7B, xC1, x80, xAB) ;
  x7DB2D9F4 = buildBlock (x7D, xB2, xD9, xF4) ;
  x7DFEFBFF = buildBlock (x7D, xFE, xFB, xFF) ;
  x7F76A3B0 = buildBlock (x7F, x76, xA3, xB0) ;
  x7F839576 = buildBlock (x7F, x83, x95, x76) ;
  x7FFFFFF0 = buildBlock (x7F, xFF, xFF, xF0) ;
  x7FFFFFF1 = buildBlock (x7F, xFF, xFF, xF1) ;
  x7FFFFFFC = buildBlock (x7F, xFF, xFF, xFC) ;
  x7FFFFFFD = buildBlock (x7F, xFF, xFF, xFD) ;
  x80000000 = buildBlock (x80, x00, x00, x00) ;
  x80000002 = buildBlock (x80, x00, x00, x02) ;
  x800000C2 = buildBlock (x80, x00, x00, xC2) ;
  x80018000 = buildBlock (x80, x01, x80, x00) ;
  x80018001 = buildBlock (x80, x01, x80, x01) ;
  x80397302 = buildBlock (x80, x39, x73, x02) ;
  x81D10CA3 = buildBlock (x81, xD1, x0C, xA3) ;
  x89D635D7 = buildBlock (x89, xD6, x35, xD7) ;
  x8CE37709 = buildBlock (x8C, xE3, x77, x09) ;
  x8DC8BBDE = buildBlock (x8D, xC8, xBB, xDE) ;
  x9115A558 = buildBlock (x91, x15, xA5, x58) ;
  x91896CFA = buildBlock (x91, x89, x6C, xFA) ;
  x9372CDC6 = buildBlock (x93, x72, xCD, xC6) ;
  x98D1CC75 = buildBlock (x98, xD1, xCC, x75) ;
  x9D15C437 = buildBlock (x9D, x15, xC4, x37) ;
  x9DB15CF6 = buildBlock (x9D, xB1, x5C, xF6) ;
  x9E2E7B36 = buildBlock (x9E, x2E, x7B, x36) ;
  xA018C83B = buildBlock (xA0, x18, xC8, x3B) ;
  xA0B87B77 = buildBlock (xA0, xB8, x7B, x77) ;
  xA44AAAC0 = buildBlock (xA4, x4A, xAA, xC0) ;
  xA511987A = buildBlock (xA5, x11, x98, x7A) ;
  xA70FC148 = buildBlock (xA7, x0F, xC1, x48) ;
  xA93BD410 = buildBlock (xA9, x3B, xD4, x10) ;
  xAAAAAAAA = buildBlock (xAA, xAA, xAA, xAA) ;
  xAB00FFCD = buildBlock (xAB, x00, xFF, xCD) ;
  xAB01FCCD = buildBlock (xAB, x01, xFC, xCD) ;
  xAB6EED4A = buildBlock (xAB, x6E, xED, x4A) ;
  xABEEED6B = buildBlock (xAB, xEE, xED, x6B) ;
  xACBC13DD = buildBlock (xAC, xBC, x13, xDD) ;
  xB1CC1CC5 = buildBlock (xB1, xCC, x1C, xC5) ;
  xB8142629 = buildBlock (xB8, x14, x26, x29) ;
  xB99A62DE = buildBlock (xB9, x9A, x62, xDE) ;
  xBA92DB12 = buildBlock (xBA, x92, xDB, x12) ;
  xBBA57835 = buildBlock (xBB, xA5, x78, x35) ;
  xBE9F0917 = buildBlock (xBE, x9F, x09, x17) ;
  xBF2D7D85 = buildBlock (xBF, x2D, x7D, x85) ;
  xBFEF7FDF = buildBlock (xBF, xEF, x7F, xDF) ;
  xC1ED90DD = buildBlock (xC1, xED, x90, xDD) ;
  xC21A1846 = buildBlock (xC2, x1A, x18, x46) ;
  xC4EB1AEB = buildBlock (xC4, xEB, x1A, xEB) ;
  xC6B1317E = buildBlock (xC6, xB1, x31, x7E) ;
  xCBC865BA = buildBlock (xCB, xC8, x65, xBA) ;
  xCD959B46 = buildBlock (xCD, x95, x9B, x46) ;
  xD0482465 = buildBlock (xD0, x48, x24, x65) ;
  xD636250D = buildBlock (xD6, x36, x25, x0D) ;
  xD7843FDC = buildBlock (xD7, x84, x3F, xDC) ;
  xD78634BC = buildBlock (xD7, x86, x34, xBC) ;
  xD8804CA5 = buildBlock (xD8, x80, x4C, xA5) ;
  xDB79FBDC = buildBlock (xDB, x79, xFB, xDC) ;
  xDB9102B0 = buildBlock (xDB, x91, x02, xB0) ;
  xE0C08000 = buildBlock (xE0, xC0, x80, x00) ;
  xE6A12F07 = buildBlock (xE6, xA1, x2F, x07) ;
  xEB35B97F = buildBlock (xEB, x35, xB9, x7F) ;
  xF0239DD5 = buildBlock (xF0, x23, x9D, xD5) ;
  xF14D6E28 = buildBlock (xF1, x4D, x6E, x28) ;
  xF2EF3501 = buildBlock (xF2, xEF, x35, x01) ;
  xF6A09667 = buildBlock (xF6, xA0, x96, x67) ;
  xFD297DA4 = buildBlock (xFD, x29, x7D, xA4) ;
  xFDC1A8BA = buildBlock (xFD, xC1, xA8, xBA) ;
  xFE4E5BDD = buildBlock (xFE, x4E, x5B, xDD) ;
  xFEA1D334 = buildBlock (xFE, xA1, xD3, x34) ;
  xFECCAA6E = buildBlock (xFE, xCC, xAA, x6E) ;
  xFEFC07F0 = buildBlock (xFE, xFC, x07, xF0) ;
  xFF2D7DA5 = buildBlock (xFF, x2D, x7D, xA5) ;
  xFFEF0001 = buildBlock (xFF, xEF, x00, x01) ;
  xFFFF00FF = buildBlock (xFF, xFF, x00, xFF) ;
  xFFFFFF2D = buildBlock (xFF, xFF, xFF, x2D) ;
  xFFFFFF3A = buildBlock (xFF, xFF, xFF, x3A) ;
  xFFFFFFF0 = buildBlock (xFF, xFF, xFF, xF0) ;
  xFFFFFFF1 = buildBlock (xFF, xFF, xFF, xF1) ;
  xFFFFFFF4 = buildBlock (xFF, xFF, xFF, xF4) ;
  xFFFFFFF5 = buildBlock (xFF, xFF, xFF, xF5) ;
  xFFFFFFF7 = buildBlock (xFF, xFF, xFF, xF7) ;
  xFFFFFFF9 = buildBlock (xFF, xFF, xFF, xF9) ;
  xFFFFFFFA = buildBlock (xFF, xFF, xFF, xFA) ;
  xFFFFFFFB = buildBlock (xFF, xFF, xFF, xFB) ;
  xFFFFFFFC = buildBlock (xFF, xFF, xFF, xFC) ;
  xFFFFFFFD = buildBlock (xFF, xFF, xFF, xFD) ;
  xFFFFFFFE = buildBlock (xFF, xFF, xFF, xFE) ;
  xFFFFFFFF = buildBlock (xFF, xFF, xFF, xFF) ;
  appendMessage (unitMessage (W), W_prime) = consMessage (W, unitMessage (W_prime)) ;
  appendMessage (consMessage (W, M), W_prime) = consMessage (W, appendMessage (M, W_prime)) ;
  reverseMessage (unitMessage (W)) = unitMessage (W) ;
  reverseMessage (consMessage (W, M)) = appendMessage (reverseMessage (M), W) ;
  eqNat (N, n0) == Xtrue -> makeMessage (succNat (N), W, W_prime) = unitMessage (W) ;
  eqNat (N, n0) == Xfalse -> makeMessage (succNat (N), W, W_prime) = consMessage (W, makeMessage (N, ADD (W, W_prime), W_prime)) ;
  ADD (W, W_prime) = addBlock (W, W_prime) ;
  AND (W, W_prime) = andBlock (W, W_prime) ;
  MUL (W, W_prime) = mulBlock (W, W_prime) ;
  OR (W, W_prime) = orBlock (W, W_prime) ;
  XOR (W, W_prime) = xorBlock (W, W_prime) ;
  XOR_prime (buildPair (W, W_prime)) = XOR (W, W_prime) ;
  CYC (buildBlock (buildOctet (B1, B2, B3, B4, B5, B6, B7, B8), buildOctet (B9, B10, B11, B12, B13, B14, B15, B16), buildOctet (B17, B18, B19, B20, B21, B22, B23, B24), buildOctet (B25, B26, B27, B28, B29, B30, B31, B32))) = buildBlock (buildOctet (B2, B3, B4, B5, B6, B7, B8, B9), buildOctet (B10, B11, B12, B13, B14, B15, B16, B17), buildOctet (B18, B19, B20, B21, B22, B23, B24, B25), buildOctet (B26, B27, B28, B29, B30, B31, B32, B1)) ;
  nCYC (n0, W) = W ;
  nCYC (succNat (N), W) = CYC (nCYC (N, W)) ;
  FIX1 (W) = AND (OR (W, x02040801), xBFEF7FDF) ;
  FIX2 (W) = AND (OR (W, x00804021), x7DFEFBFF) ;
  needAdjust (O) = orBool (eqOctet (O, x00), eqOctet (O, xFF)) ;
  needAdjust (O) == Xtrue -> adjustCode (O) = x1 ;
  needAdjust (O) == Xfalse -> adjustCode (O) = x0 ;
  needAdjust (O) == Xtrue -> adjust (O, O_prime) = xorOctet (O, O_prime) ;
  needAdjust (O) == Xfalse -> adjust (O, O_prime) = O ;
  PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = buildOctet (adjustCode (O1), adjustCode (O2), adjustCode (O3), adjustCode (O4), adjustCode (O_prime1), adjustCode (O_prime2), adjustCode (O_prime3), adjustCode (O_prime4)) ;
  BYT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4)) = BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, PAT (buildBlock (O1, O2, O3, O4), buildBlock (O_prime1, O_prime2, O_prime3, O_prime4))) ;
  BYT_prime (O1, O2, O3, O4, O_prime1, O_prime2, O_prime3, O_prime4, Opat) = buildPair (buildBlock (adjust (O1, rightOctet7 (Opat)), adjust (O2, rightOctet6 (Opat)), adjust (O3, rightOctet5 (Opat)), adjust (O4, rightOctet4 (Opat))), buildBlock (adjust (O_prime1, rightOctet3 (Opat)), adjust (O_prime2, rightOctet2 (Opat)), adjust (O_prime3, rightOctet1 (Opat)), adjust (O_prime4, Opat))) ;
  ADDC (W, W_prime) = ADDC_prime (addBlockSum (W, W_prime)) ;
  ADDC_prime (buildBlockSum (x0, W)) = buildPair (x00000000, W) ;
  ADDC_prime (buildBlockSum (x1, W)) = buildPair (x00000001, W) ;
  MUL1 (W, W_prime) = MUL1XY (MUL (W, W_prime)) ;
  MUL1XY (buildPair (W, W_prime)) = MUL1UL (W, W_prime) ;
  MUL1UL (W, W_prime) = MUL1SC (ADDC (W, W_prime)) ;
  MUL1SC (buildPair (Wcarry, W)) = ADD (W, Wcarry) ;
  MUL2 (W, W_prime) = MUL2XY (MUL (W, W_prime)) ;
  MUL2XY (buildPair (W, W_prime)) = MUL2UL (W, W_prime) ;
  MUL2UL (W, W_prime) = MUL2DEL (ADDC (W, W), W_prime) ;
  MUL2DEL (buildPair (Wcarry, W), W_prime) = MUL2FL (ADD (W, ADD (Wcarry, Wcarry)), W_prime) ;
  MUL2FL (W, W_prime) = MUL2SC (ADDC (W, W_prime)) ;
  MUL2SC (buildPair (Wcarry, W)) = ADD (W, ADD (Wcarry, Wcarry)) ;
  MUL2A (W, W_prime) = MUL2AXY (MUL (W, W_prime)) ;
  MUL2AXY (buildPair (W, W_prime)) = MUL2AUL (W, W_prime) ;
  MUL2AUL (W, W_prime) = MUL2ADL (ADD (W, W), W_prime) ;
  MUL2ADL (W, W_prime) = MUL2ASC (ADDC (W, W_prime)) ;
  MUL2ASC (buildPair (Wcarry, W)) = ADD (W, ADD (Wcarry, Wcarry)) ;
  squareHalf (H) = mulHalf (H, H) ;
  Q (O) = squareHalf (addHalf (buildHalf (x00, O), x0001)) ;
  J1_2 (W) = MUL1 (W, W) ;
  J1_4 (W) = MUL1 (J1_2 (W), J1_2 (W)) ;
  J1_6 (W) = MUL1 (J1_2 (W), J1_4 (W)) ;
  J1_8 (W) = MUL1 (J1_2 (W), J1_6 (W)) ;
  J2_2 (W) = MUL2 (W, W) ;
  J2_4 (W) = MUL2 (J2_2 (W), J2_2 (W)) ;
  J2_6 (W) = MUL2 (J2_2 (W), J2_4 (W)) ;
  J2_8 (W) = MUL2 (J2_2 (W), J2_6 (W)) ;
  K1_2 (W) = MUL1 (W, W) ;
  K1_4 (W) = MUL1 (K1_2 (W), K1_2 (W)) ;
  K1_5 (W) = MUL1 (W, K1_4 (W)) ;
  K1_7 (W) = MUL1 (K1_2 (W), K1_5 (W)) ;
  K1_9 (W) = MUL1 (K1_2 (W), K1_7 (W)) ;
  K2_2 (W) = MUL2 (W, W) ;
  K2_4 (W) = MUL2 (K2_2 (W), K2_2 (W)) ;
  K2_5 (W) = MUL2 (W, K2_4 (W)) ;
  K2_7 (W) = MUL2 (K2_2 (W), K2_5 (W)) ;
  K2_9 (W) = MUL2 (K2_2 (W), K2_7 (W)) ;
  H4 (W) = XOR (J1_4 (W), J2_4 (W)) ;
  H6 (W) = XOR (J1_6 (W), J2_6 (W)) ;
  H8 (W) = XOR (J1_8 (W), J2_8 (W)) ;
  H0 (W) = XOR (K1_5 (W), K2_5 (W)) ;
  H5 (W, O) = MUL2 (H0 (W), Q (O)) ;
  H7 (W) = XOR (K1_7 (W), K2_7 (W)) ;
  H9 (W) = XOR (K1_9 (W), K2_9 (W)) ;
  splitSegment (unitMessage (W)) = unitSegment (unitMessage (W)) ;
  splitSegment (consMessage (W, M)) = cutSegment (M, unitMessage (W), n254) ;
  cutSegment (unitMessage (W), M_prime, N) = unitSegment (reverseMessage (consMessage (W, M_prime))) ;
  cutSegment (consMessage (W, M), M_prime, n0) = consSegment (reverseMessage (consMessage (W, M_prime)), splitSegment (M)) ;
  cutSegment (consMessage (W, M), M_prime, succNat (N)) = cutSegment (M, consMessage (W, M_prime), N) ;
  preludeXY (W1, W2) = preludeXY_prime (BYT (W1, W2), PAT (W1, W2)) ;
  preludeVW (W1, W2) = preludeVW_prime (BYT (W1, W2)) ;
  preludeST (W1, W2) = preludeST_prime (BYT (W1, W2)) ;
  preludeXY_prime (buildPair (W, W_prime), O) = BYT (H4 (W), H5 (W_prime, O)) ;
  preludeVW_prime (buildPair (W, W_prime)) = BYT (H6 (W), H7 (W_prime)) ;
  preludeST_prime (buildPair (W, W_prime)) = BYT (H8 (W), H9 (W_prime)) ;
  computeXY (P, P_prime, W) = computeXY_prime (P, W, XOR_prime (computeVW (P_prime))) ;
  computeXY_prime (buildPair (W1, W2), W, W_prime) = buildPair (MUL1 (XOR (W1, W), FIX1 (ADD (XOR (W2, W), W_prime))), MUL2A (XOR (W2, W), FIX2 (ADD (XOR (W1, W), W_prime)))) ;
  computeVW (buildPair (W1, W2)) = buildPair (CYC (W1), W2) ;
  loop1 (P, P_prime, unitMessage (W)) = computeXY (P, P_prime, W) ;
  loop1 (P, P_prime, consMessage (W, M)) = loop1 (computeXY (P, P_prime, W), computeVW (P_prime), M) ;
  loop2 (P, P_prime, unitMessage (W)) = computeVW (P_prime) ;
  loop2 (P, P_prime, consMessage (W, M)) = loop2 (computeXY (P, P_prime, W), computeVW (P_prime), M) ;
  coda (P, P_prime, buildPair (W, W_prime)) = XOR_prime (computeXY (computeXY (P, P_prime, W), computeVW (P_prime), W_prime)) ;
  MAA (buildKey (W1, W2), M) = MAA_prime (preludeXY (W1, W2), preludeVW (W1, W2), preludeST (W1, W2), M) ;
  MAA_prime (P1, P2, P3, M) = coda (loop1 (P1, P2, M), loop2 (P1, P2, M), P3) ;
  MAC (K, M) = MACfirst (K, splitSegment (M)) ;
  MACfirst (K, unitSegment (M)) = MAA (K, M) ;
  MACfirst (K, consSegment (M, S)) = MACnext (K, MAA (K, M), S) ;
  MACnext (K, W, unitSegment (M)) = MAA (K, consMessage (W, M)) ;
  MACnext (K, W, consSegment (M, S)) = MACnext (K, MAA (K, consMessage (W, M)), S) ;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Algorithm for starvation freedom from deadlock freedom, applied to Dekker's mutex algorithm made RW-safe %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Register definitions (id's; minimum, and maximum values)
sort
	RID = struct flag(rtid:TID) | turn | flagDFtoSF(rtid:TID) | turnDFtoSF;
var
    rid: RID;
    tid: TID;
    d: Data;
eqn
	MIN(rid) = 0;
    MAX(rid) = 1;

%% Algorithm specific actions or function definitions
act
	crit, noncrit: TID;
	line: TID # Nat;

map
	other: TID -> TID;
eqn
	other(0) = 1;
	other(1) = 0;

map
	next: TID -> TID;
var
	tid: TID;
eqn
	(tid != MAX_TID) -> next(tid) = tid + 1;
	(tid == MAX_TID) -> next(tid) = MIN_TID;

%% Threads executing the algorithm 
proc
    Thread(tid: TID) =
        noncrit(tid)|label(nc(tid)).
		DFtoSF_1(tid);

	%% Entry part of DFtoSF algorithm
	% 1: flag[1] <- true
	DFtoSF_1(tid: TID) =
		start_write_s(tid, flagDFtoSF(tid), 1)|line(tid, 101).
		finish_write_r(tid, flagDFtoSF(tid))|line(tid, 101).
		DFtoSF_2(tid);

	% 2: do tmp <- turn
	DFtoSF_2(tid: TID) =
		start_read_s(tid, turnDFtoSF)|line(tid, 102).
		sum t: Data.
		finish_read_r(tid, turnDFtoSF, t)|line(tid, 102).
		DFtoSF_3(tid, t);

	% 3: if (tmp == i || flag[tmp] == 0) goto Dekker entry, else goto 2
	DFtoSF_3(tid: TID, tmp: TID) =
		start_read_s(tid, flagDFtoSF(tmp))|line(tid, 103).
		sum f: Data.
		finish_read_r(tid, flagDFtoSF(tmp), f)|line(tid, 103).
		(tmp == tid || f == 0) -> (
			Dekker_1(tid)
		) <> (
			DFtoSF_2(tid)
		);

	%% Entry part of Dekker's algorithm made RW-safe
	% flag[i] := 1
	Dekker_1(tid: TID) =
		start_write_s(tid, flag(tid), 1)|line(tid, 1).
		finish_write_r(tid, flag(tid))|line(tid, 1).
		Dekker_2(tid);

	% while flag[other] = true
	Dekker_2(tid: TID) =
		start_read_s(tid, flag(other(tid)))|line(tid, 2).
		sum f: Data.
		finish_read_r(tid, flag(other(tid)), f)|line(tid, 2).
		(f == 1) -> (
			Dekker_3(tid)
		) <> (
			Crit(tid)
		);

	% if turn != i
	Dekker_3(tid: TID) =
		start_read_s(tid, turn)|line(tid, 3).
		sum t: Data.
		finish_read_r(tid, turn, t)|line(tid, 3).
		(t != tid) -> (
			Dekker_4(tid)
		) <> (
			Dekker_2(tid)
		);

	% flag[i] := 0
	Dekker_4(tid: TID) =
		start_write_s(tid, flag(tid), 0)|line(tid, 4).
		finish_write_r(tid, flag(tid))|line(tid, 4).
		Dekker_5(tid);

	% await turn = i or flag[j] = 0
	Dekker_5(tid: TID) =
		start_read_s(tid, turn)|line(tid, 5).
		sum t: Data.
		finish_read_r(tid, turn, t)|line(tid, 5).
		start_read_s(tid, flag(other(tid)))|line(tid, 5).
		sum fj: Data.
		finish_read_r(tid, flag(other(tid)), fj)|line(tid, 5).
		(t != tid && fj != 0) -> (
			Dekker_5(tid)
		) <> (
			Dekker_6(tid)
		);

	% flag[i] := 1
	Dekker_6(tid: TID) =
		start_write_s(tid, flag(tid), 1)|line(tid, 6).
		finish_write_r(tid, flag(tid))|line(tid, 6).
		Dekker_2(tid);

	%% Crit
	% crit
	Crit(tid: TID) =
		crit(tid)|label(c(tid)).
		DFtoSF_4(tid);

	%% Exit part of DFtoSF algorithm
	% 4: flag[i] <- false
	DFtoSF_4(tid: TID) =
		start_write_s(tid, flagDFtoSF(tid), 0)|line(tid, 104).
		finish_write_r(tid, flagDFtoSF(tid))|line(tid, 104).
		DFtoSF_5(tid);

	% 5: tmp <- turn
	DFtoSF_5(tid: TID) =
		start_read_s(tid, turnDFtoSF)|line(tid, 105).
		sum t: Data.
		finish_read_r(tid, turnDFtoSF, t)|line(tid, 105).
		DFtoSF_6(tid, t);

	% 6: if flag[tmp] == 0 then goto 7, else goto lamport exit
	DFtoSF_6(tid: TID, tmp: TID) =
		start_read_s(tid, flagDFtoSF(tmp))|line(tid, 106).
		sum f: Data.
		finish_read_r(tid, flagDFtoSF(tmp), f)|line(tid, 106).
		(f == 0) -> (
			DFtoSF_7(tid, tmp)
		) <> (
			Dekker_8(tid)
		);

	% 7: turn <- (tmp + 1) mod n
	DFtoSF_7(tid: TID, tmp: TID) =
		start_write_s(tid, turnDFtoSF, next(tmp))|line(tid, 107).
		finish_write_r(tid, turnDFtoSF)|line(tid, 107).
		Dekker_8(tid);

	%% Exit part of Dekker's algorithm made RW-safe
	% turn := other only if not already
	Dekker_8(tid: TID) =
		start_read_s(tid, turn)|line(tid, 8).
		sum t: Data.
		finish_read_r(tid, turn, t)|line(tid, 8).
		(t == tid) -> (
			start_write_s(tid, turn, other(tid))|line(tid, 8).
			finish_write_r(tid, turn)|line(tid, 8).
			Dekker_9(tid)
		) <> (
			Dekker_9(tid)
		);

	% flag[i] := 0
	Dekker_9(tid: TID) =
		start_write_s(tid, flag(tid), 0)|line(tid, 9).
		finish_write_r(tid, flag(tid))|line(tid, 9).
		Thread(tid);

init
	hide({
		line, crit, noncrit,
		start_read, finish_read,
		start_write, finish_write,
		order_read, order_write
		},
    allow({
		crit|label, noncrit|label,
        start_read|label|line, finish_read|label|line,
        start_write|label|line, finish_write|label|line,
        order_read|label, order_write|label
        },
    comm({
        start_read_s  | start_read_r  -> start_read,
        finish_read_s | finish_read_r -> finish_read,
        start_write_s  | start_write_r  -> start_write,
        finish_write_s | finish_write_r -> finish_write
        }, 
	%% Initialization of the threads and registers
        Thread(0) || Safe_Register(flag(0), 0) || Safe_Register(flagDFtoSF(0), 0)
	 || Thread(1) || Safe_Register(flag(1), 0) || Safe_Register(flagDFtoSF(1), 0)
	 || Safe_Register(turn, 0) || Safe_Register(turnDFtoSF, 0)
  ))); 

%% Define the number of registers
eqn
	NUM = 2;

%% Definition of labels
sort
	Label = struct
		sr(ltid: TID, lrid: RID)?is_sr |
		fr(ltid: TID, lrid: RID, ldata: Data)?is_fr |
		sw(ltid: TID, lrid: RID, ldata: Data)?is_sw |
		fw(ltid: TID, lrid: RID)?is_fw |
		or(ltid: TID, lrid: RID)?is_or |
		ow(ltid: TID, lrid: RID)?is_ow |
		c(ltid: TID)?is_c |
		nc(ltid: TID)?is_nc;

%% Define block
eqn
	Block = {a : Label | is_nc(a)};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% For most applications, nothing below here needs to be altered.   %%
%% It contains the register definitions, the RID and TID data types,%%
%% and the standard actions that are part of the model.             %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sort
    TID = Nat;
map
	NUM: Nat;
    MIN_TID, MAX_TID: TID;
    valid_tid: TID -> Bool;
var
    tid: TID;
eqn
    MIN_TID = 0;
    MAX_TID = Int2Nat(NUM - 1);
    valid_tid(tid) = MIN_TID <= tid && tid <= MAX_TID;

sort
    Data = Nat;
map
    MIN, MAX, INIT: RID -> Data;
    valid_data: RID # Data -> Bool;
var
    d: Data;
    rid: RID;
eqn
    valid_data(rid, d) = MIN(rid) <= d && d <= MAX(rid);

act 
    start_read_s, start_read_r, start_read: TID # RID;
    finish_read_s, finish_read_r, finish_read: TID # RID # Data;
    start_write_s, start_write_r, start_write: TID # RID # Data;
    finish_write_s, finish_write_r, finish_write: TID # RID;
    order_read, order_write: TID # RID;
	label: Label;

map
	Block: Set(Label);
	nonblock: Label -> Bool;

var
	a: Label;
eqn
	nonblock(a) = !(a in Block);

%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Justness definitions %%
%%%%%%%%%%%%%%%%%%%%%%%%%%

map
	elimT: Label -> Set(Label);
	elimS: Label -> Set(Label);
	elimI: Label -> Set(Label);
	elimA: Label -> Set(Label);

var
	a: Label;
eqn
	elimT(a) = { b : Label | ltid(a) == ltid(b)};
	!(is_sr(a) || is_sw(a)) -> elimS(a) = elimT(a);
	(is_sr(a) || is_sw(a)) -> elimS(a) = elimT(a) + {b : Label | is_sw(b) && lrid(a) == lrid(b)};
	!(is_sw(a)) -> elimI(a) = elimS(a);
	(is_sw(a)) -> elimI(a) = elimS(a) + {b : Label | is_sr(b) && lrid(a) == lrid(b)};
	!(is_sr(a)) -> elimA(a) = elimI(a);
	(is_sr(a)) -> elimA(a) = elimI(a) + {b : Label | is_sr(b) && lrid(a) == lrid(b)};

%%%%%%%%%%%%%%%%%%%%
%% Safe Registers %%
%%%%%%%%%%%%%%%%%%%%
sort
    Overlapping = TID -> Bool;
map
    ALL_OVERLAPPING: Overlapping;
var
    tid: TID;
eqn
    ALL_OVERLAPPING(tid) = true;

sort
    Status_safe = struct status_safe(
					stored: Data,
					next: Data,
					initial: Data,
					overlap: Overlapping,
					readers: Set(TID), 
					writers: Set(TID));
    
map 
    INIT_Status_safe: Data -> Status_safe;
    start_reading: Status_safe # TID -> Status_safe;
    finish_reading: Status_safe # TID -> Status_safe;
    start_writing: Status_safe # TID # Data -> Status_safe;
    finish_writing: Status_safe # TID # Data -> Status_safe;
    overlapping_write: Status_safe # TID -> Bool;
	stored_val: Status_safe -> Data;
    
var
    tid: TID;
    rid: RID;
    o: Overlapping;
	rs, ws: Set(TID),
    s,n,i,d: Data;
eqn 
    INIT_Status_safe(s) = status_safe(s, s, s, ALL_OVERLAPPING, {}, {});
    start_reading(status_safe(s, n, i, o, rs, ws), tid) = 
        status_safe(s, n, i, o[tid -> ws != {}], rs + {tid}, ws);
    finish_reading(status_safe(s, n, i, o, rs, ws), tid) = 
        status_safe(s, n, i, o[tid -> true], rs - {tid}, ws);
    ws == {} -> start_writing(status_safe(s, n, i, o, rs, ws), tid, d) = 
        status_safe(s, d, i, ALL_OVERLAPPING[tid -> false], rs, ws + {tid});
    ws != {} -> start_writing(status_safe(s, n, i, o, rs, ws), tid, d) = 
        status_safe(s, i, i, ALL_OVERLAPPING,rs, ws + {tid});
    finish_writing(status_safe(s, n, i, o, rs, ws), tid, d) = 
        status_safe(d, i, i, o[tid->true], rs, ws - {tid});
    overlapping_write(status_safe(s, n, i, o, rs, ws), tid) = o(tid);

proc
    Safe_Register(rid: RID, d: Data) = Register_safe(rid,INIT_Status_safe(d));

    Register_safe(rid: RID, s: Status_safe) =
          sum tid: TID. valid_tid(tid) -> (
			((!(tid in readers(s) || tid in writers(s))) -> (
            	( start_read_r(tid,rid)|label(sr(tid, rid)).Register_safe(s=start_reading(s, tid)) )
            	+ ( sum d: Data. valid_data(rid, d) ->(
                	start_write_r(tid,rid,d)|label(sw(tid,rid,d)).Register_safe(s=start_writing(s, tid, d)) ) )
			))
            + ( overlapping_write(s, tid) -> (
                sum d: Data. valid_data(rid, d) ->(
                     ((tid in readers(s)) -> finish_read_s(tid,rid,d)|label(fr(tid,rid,d)).Register_safe(s=finish_reading(s, tid)))
                     + ((tid in writers(s)) -> finish_write_s(tid,rid)|label(fw(tid,rid)).Register_safe(s=finish_writing(s, tid, d)) ) )
                ) <> ( 
					 ((tid in readers(s)) -> finish_read_s(tid,rid,stored(s))|label(fr(tid,rid,stored(s))).Register_safe(s=finish_reading(s, tid)))
                     + ((tid in writers(s)) -> finish_write_s(tid,rid)|label(fw(tid,rid)).Register_safe(s=finish_writing(s, tid, next(s)) ) ) ) ));

%%%%%%%%%%%%%%%%%%%%%%%     
%% Regular registers %%
%%%%%%%%%%%%%%%%%%%%%%%
sort
    Possible_values = TID -> Set(Data);
map
    ALL_EMPTY: Possible_values;
	ALL_INIT: Data -> (TID -> Data);
	add_readers: Possible_values # Set(TID) # Data -> Possible_values;
	add_readers_step: Possible_values # Set(TID) # TID # Data -> Possible_values;
var
    tid: TID;
    pv: Possible_values;
    d: Data;
	st: Set(TID);
eqn
    ALL_EMPTY(tid) = {};
	ALL_INIT(d)(tid) = d;
	add_readers(pv, st, d) = add_readers_step(pv, st, MIN_TID, d);
	(valid_tid(tid) && !(tid in st)) -> add_readers_step(pv, st, tid, d) = add_readers_step(pv, st, tid + 1, d);
	(valid_tid(tid) && (tid in st)) -> add_readers_step(pv, st, tid, d) = add_readers_step(pv[tid -> pv(tid) + {d}], st, tid + 1, d);
	(!valid_tid(tid)) -> add_readers_step(pv, st, tid, d) = pv;

sort
    Status_regular = struct status_regular(
						stored: Data,
						initial: Data, 
						rpos: Possible_values, 
						curvals: Bag(Data), 
						record:  TID -> Data, 
						readers: Set(TID), 
						writers: Set(TID),
						pending: Set(TID));


map
    INIT_Status_regular: Data -> Status_regular;
    
    start_reading: Status_regular # TID -> Status_regular;
    finish_reading: Status_regular # TID -> Status_regular;
    pos_val: Status_regular # TID -> Set(Data);
    start_writing: Status_regular # TID # Data -> Status_regular;
    finish_writing: Status_regular # TID -> Status_regular;
    order_writing: Status_regular # TID -> Status_regular;
    
var
    tid: TID;
    rid: RID;
    s, i, d: Data;
    rp: Possible_values;
    cv: Bag(Data);
    rec: TID -> Data;
	rs, ws, ps: Set(TID);
        
eqn
    INIT_Status_regular(d) = status_regular(d, d, ALL_EMPTY, {:}, ALL_INIT(d), {}, {}, {}); 
    
    start_reading(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid) =
        status_regular(s, i, rp[tid -> Bag2Set(cv) + {s}], cv, rec, rs + {tid}, ws, ps);
    finish_reading(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid) =
        status_regular(s, i, rp[tid -> {}], cv, rec, rs - {tid}, ws, ps);
    pos_val(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid) =
        rp(tid);
    start_writing(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid, d) =
        status_regular(s, i, add_readers(rp, rs, d), cv + {d:1}, rec[tid -> d], rs, ws + {tid}, ps + {tid});
    finish_writing(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid) =
        status_regular(s, i, rp, cv - {rec(tid):1}, rec[tid -> i], rs, ws - {tid}, ps);
    order_writing(status_regular(s, i, rp, cv, rec, rs, ws, ps), tid) =
        status_regular(rec(tid), i, rp, cv, rec, rs, ws, ps - {tid});
    
proc
    Regular_Register(rid: RID, d: Data) = Register_regular(rid, INIT_Status_regular(d));

    Register_regular(rid: RID, s: Status_regular) =
    	sum tid: TID. valid_tid(tid) -> (
		(!(tid in readers(s) || tid in writers(s)) -> (
        	( start_read_r(tid, rid)|label(sr(tid,rid)).Register_regular(s=start_reading(s, tid)))
        	+ ( sum d: Data. valid_data(rid, d) ->
            	( start_write_r(tid, rid, d)|label(sw(tid,rid,d)).Register_regular(s=start_writing(s, tid, d)) ) ) ))
        + ((tid in readers(s)) -> ( sum d: Data. (valid_data(rid, d) && d in pos_val(s, tid)) ->
            ( finish_read_s(tid, rid, d)|label(fr(tid,rid,d)).Register_regular(s=finish_reading(s,tid)) ) ))
        + ( (tid in writers(s) && tid in pending(s)) ->
            ( order_write(tid,rid)|label(ow(tid,rid)).Register_regular(s=order_writing(s,tid)) ) )
        + ( (tid in writers(s) && !(tid in pending(s))) ->
            ( finish_write_s(tid, rid)|label(fw(tid,rid)).Register_regular(s=finish_writing(s,tid)) ) ) )
    ;

%%%%%%%%%%%%%%%%%%%%%%
%% Atomic Registers %%
%%%%%%%%%%%%%%%%%%%%%%
sort
    Status_atomic = struct status_atomic(
						stored: Data,
						initial: Data,
						record:TID->Data, 
						readers:Set(TID), 
						writers:Set(TID),
						pending:Set(TID));
    
map 
    INIT_Status_atomic: Data -> Status_atomic;

    start_reading: Status_atomic # TID -> Status_atomic;
    order_reading: Status_atomic # TID -> Status_atomic;
    finish_reading: Status_atomic # TID -> Status_atomic;
    start_writing: Status_atomic # TID # Data -> Status_atomic;
	order_writing: Status_atomic # TID -> Status_atomic;
    finish_writing: Status_atomic # TID -> Status_atomic;
    
var
    tid: TID;
    rid: RID;
    rs,ws,ps: Set(TID);
    rec: TID->Data;
    s,i,d: Data;
eqn 
    INIT_Status_atomic(d) = status_atomic(d, d, ALL_INIT(d),{},{}, {});
        
    start_reading(status_atomic(s, i, rec, rs, ws, ps), tid) = 
        status_atomic(s, i, rec, rs + {tid}, ws, ps + {tid});
    order_reading(status_atomic(s, i, rec, rs, ws, ps), tid) =
            status_atomic(s, i, rec[tid -> s], rs, ws, ps - {tid});
    finish_reading(status_atomic(s, i, rec, rs, ws, ps), tid) = 
        status_atomic(s, i, rec[tid->i], rs - {tid}, ws, ps);
    start_writing(status_atomic(s, i, rec, rs, ws, ps), tid, d) = 
        status_atomic(s, i, rec[tid -> d], rs, ws + {tid}, ps + {tid});
	order_writing(status_atomic(s, i, rec, rs, ws, ps), tid) =
		status_atomic(rec(tid), i, rec[tid -> i], rs, ws, ps - {tid});
    finish_writing(status_atomic(s, i, rec, rs, ws, ps), tid) = 
        status_atomic(s, i, rec, rs, ws - {tid}, ps);

proc
    Atomic_Register(rid: RID, d: Data) = Register_atomic(rid,INIT_Status_atomic(d));

    Register_atomic(rid: RID, s: Status_atomic) =
    	sum tid: TID. valid_tid(tid) -> (
      ( (!(tid in readers(s) || tid in writers(s))) ->
              (start_read_r(tid,rid)|label(sr(tid,rid)).Register_atomic(s=start_reading(s, tid))))
        + ( (!(tid in writers(s) || tid in writers(s))) -> (
                  sum d: Data. valid_data(rid, d) ->
          ( start_write_r(tid,rid,d)|label(sw(tid,rid,d)).Register_atomic(s=start_writing(s, tid, d)) ) ) )
        + ( (tid in readers(s) && tid in pending(s)) ->
          order_read(tid,rid)|label(or(tid,rid)).Register_atomic(s=order_reading(s,tid)) )
        + ( (tid in writers(s) && tid in pending(s)) ->
            order_write(tid,rid)|label(ow(tid,rid)).Register_atomic(s=order_writing(s,tid)) )
        + ( (tid in readers(s) && !(tid in pending(s))) ->
              finish_read_s(tid,rid,record(s)(tid))|label(fr(tid,rid,record(s)(tid))).Register_atomic(s=finish_reading(s,tid)) )
        + ( (tid in writers(s) && !(tid in pending(s))) ->
              finish_write_s(tid,rid)|label(fw(tid,rid)).Register_atomic(s=finish_writing(s,tid)) ) )
    ;
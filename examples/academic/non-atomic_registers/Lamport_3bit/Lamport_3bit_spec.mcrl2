%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Lamport's 3 bit algorithm with correct z implementation %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Register definitions (id's; initial, minimum, and maximum values; value for "undefined")
sort
	RID = struct X(rtid: TID) | Y(rtid: TID) | Z(rtid: TID);
var
    rid: RID;
    tid: TID;
    d: Data;
eqn
    INIT(rid) = 0;
    MIN(rid)  = 0;
    MAX(rid) = 1;

    UNDEFINED = 999;

%% Algorithm specific actions or function definitions
act
	crit, noncrit: TID;
	line: TID # Nat;

map
	minCG: List(Data) # List(TID) # Nat -> TID;
var
	z: List(Data);
	gamma: List(TID);
	idx: Nat;
eqn
	( idx == 0 && z.(Int2Nat(#gamma - 1)) == z.idx) -> minCG(z, gamma, idx) = gamma.idx;
	( idx > 0 && idx < #gamma && z.(Int2Nat(idx - 1)) != z.idx ) -> minCG(z, gamma, idx) = gamma.idx;
	( idx == 0 && z.(Int2Nat(#gamma - 1)) != z.idx) -> minCG(z, gamma, idx) = minCG(z, gamma, idx + 1);
	( idx > 0 && idx < #gamma && z.(Int2Nat(idx - 1)) == z.idx ) -> minCG(z, gamma, idx) = minCG(z, gamma, idx + 1);

%% Threads executing the algorithm 
proc
	Thread(tid: TID) = noncrit(tid).Thread_1(tid);
% 1: y_i <- 1
  Thread_1(tid: TID) =
	  start_write_s(tid,Y(tid),1)|line(tid,1).finish_write_r(tid,Y(tid))|line(tid,1).Thread_2(tid);
% 2: x_i <- 1
  Thread_2(tid: TID) =
	  start_write_s(tid,X(tid),1)|line(tid,2).finish_write_r(tid,X(tid))|line(tid,2).Thread_3(tid,MIN_TID,[],[]);
% 3: gamma <- ORD{i| y_i = 1}
  Thread_3(tid,tid': TID,gamma:List(TID),z:List(Data)) =
    (tid' <= MAX_TID)
		  -> ( start_read_s(tid,Y(tid'))|line(tid,3).
			       sum d:Data.valid_data(d,Y(tid')) -> (
						   finish_read_r(tid,Y(tid'),d)|line(tid,3).
							   (d==1) -> 
									( start_read_s(tid, Z(tid'))|line(tid,3).
										sum d': Data.valid_data(d', Z(tid')) -> (
											finish_read_r(tid, Z(tid'), d')|line(tid,3).
												Thread_3(tid,tid'+1,gamma ++ [tid'], z ++ [d']) ) )
								        <> Thread_3(tid,tid'+1,gamma, z)
						 ) )
			<> Thread_4(tid,gamma,z)
	;
% 4: f <- minimum{j in gamma| CG(z,gamma,j)=1}
  Thread_4(tid:TID,gamma:List(TID),z:List(Data)) =
		Thread_5(tid, minCG(z, gamma, 0), minCG(z, gamma, 0));
		
% 5: for j <- f cyclically to i do
  Thread_5(tid,f,j:TID) =
	  (j==tid)
		  -> Thread_9(tid,f)
		  <> Thread_6(tid,f,j)
	;
% 6: if y_j=1 then
  Thread_6(tid,f,j:TID) =
	  start_read_s(tid,Y(j))|line(tid,6).
		  sum d:Data.valid_data(d,Y(j))->(
			  finish_read_r(tid,Y(j),d)|line(tid,6).
				  (d==1) -> Thread_7(tid,f,j)
					       <> ( (j<MAX_TID) -> Thread_5(tid,f,j+1)
								                   <> Thread_5(tid,f,MIN_TID) )
			)
	;
% 7: if x_i = 1 then x_i <- 0
  Thread_7(tid,f,j:TID) =
	  start_read_s(tid,X(tid))|line(tid,7).
		  sum d:Data.valid_data(d,X(tid))->(
			  finish_read_r(tid,X(tid),d)|line(tid,7).
				  (d==1) -> ( start_write_s(tid,X(tid),0)|line(tid, 7).finish_write_r(tid,X(tid))|line(tid,7).Thread_8(tid) )
					       <> Thread_8(tid) )
  ;
% 8: goto 2
  Thread_8(tid:TID) = Thread_3(tid,MIN_TID,[],[]);
% 9: if x_i = 0 then goto 1
  Thread_9(tid,f:TID) =
	  start_read_s(tid,X(tid))|line(tid,9).
		  sum d:Data.valid_data(d,X(tid))->(
			  finish_read_r(tid,X(tid),d)|line(tid,9).
				  (d==0) -> Thread_2(tid)
					       <> ( (tid+1 <= MAX_TID) -> Thread_10(tid,f,tid+1) <> Thread_10(tid,f,MIN_TID) )
			)
	;
% 10: for j <- i (+) 1 cyclically to f do
  Thread_10(tid,f,j:TID) =
	  (j==f) -> Thread_12(tid)
           <> Thread_11(tid,f,j)
  ;
% 11: if x_j = 1 then goto 2
  Thread_11(tid,f,j:TID) =
		start_read_s(tid,X(j))|line(tid,11).(
		  sum d:Data.valid_data(d,X(j))->(
			  finish_read_r(tid,X(j),d)|line(tid,11).
				  (d==1) -> Thread_3(tid,MIN_TID,[],[])
					     <> ( (j+1 <= MAX_TID) -> Thread_10(tid,f,j+1) <> Thread_10(tid,f,MIN_TID) ) ) )
  ;
% 12: critical section
  Thread_12(tid:TID) = crit(tid).Thread_13(tid);
% 13: z_i <- 1 - z_i
  Thread_13(tid:TID) =
	  start_read_s(tid,Z(tid))|line(tid,13).
		  sum d:Data.valid_data(d,Z(tid)) -> (
			  finish_read_r(tid,Z(tid),d)|line(tid,13).(
				  start_write_s(tid,Z(tid),Int2Nat(1-d))|line(tid,13).finish_write_r(tid,Z(tid))|line(tid,13).Thread_14(tid) )	)
	;
% 14: x_i <- 0
  Thread_14(tid:TID) =
	  start_write_s(tid,X(tid),0)|line(tid,14).finish_write_r(tid,X(tid))|line(tid,14).Thread_15(tid)
  ;
% 15: y_i <- 0
  Thread_15(tid:TID) =
	  start_write_s(tid,Y(tid),0)|line(tid,15).finish_write_r(tid,Y(tid))|line(tid,15).Thread(tid)
	;

init
	hide({
		line
		},
    allow({
		crit, noncrit,
        start_read|line, finish_read|line,
        start_write|line, finish_write|line,
        exec_read, exec_write, order_write
        },
    comm({
        start_read_s  | start_read_r  -> start_read,
        finish_read_s | finish_read_r -> finish_read,
        start_write_s  | start_write_r  -> start_write,
        finish_write_s | finish_write_r -> finish_write
        }, 
	%% Initialization of the threads and registers
	   Thread(0)  || Safe_Register(X(0)) || Safe_Register(Y(0)) || Safe_Register(Z(0))
	|| Thread(1)  || Safe_Register(X(1)) || Safe_Register(Y(1)) || Safe_Register(Z(1))
	|| Thread(2)  || Safe_Register(X(2)) || Safe_Register(Y(2)) || Safe_Register(Z(2))
  ))); 

%% Maximum and minimum thread id's
eqn
    MIN_TID = 0;
    MAX_TID = 2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% For most applications, nothing below here needs to be altered.   %%
%% It contains the register definitions, the RID and TID data types,%%
%% and the standard actions that are part of the model.             %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sort
    TID = Nat;
map
    MIN_TID, MAX_TID: TID;
    valid_tid: TID -> Bool;
var
    tid: TID;
eqn
    valid_tid(tid) = MIN_TID <= tid && tid <= MAX_TID;

sort
    Data = Nat;
map
    MIN, MAX, INIT: RID -> Data;
    UNDEFINED: Data;
    valid_data: Data # RID -> Bool;
var
    d: Data;
    rid: RID;
eqn
    valid_data(d,rid) = MIN(rid) <= d && d <= MAX(rid);

act 
    start_read_s, start_read_r, start_read: TID # RID;
    finish_read_s, finish_read_r, finish_read: TID # RID # Data;
    start_write_s, start_write_r, start_write: TID # RID # Data;
    finish_write_s, finish_write_r, finish_write: TID # RID;
    exec_read, exec_write, order_write: TID # RID;

%%%%%%%%%%%%%%%%%%%%
%% Safe Registers %%
%%%%%%%%%%%%%%%%%%%%
sort
    Overlapping = TID -> Bool;
map
    ALL_OVERLAPPING: Overlapping;
var
    tid: TID;
eqn
    ALL_OVERLAPPING(tid) = true;

sort
    Status_safe = struct status_safe(
					overlapping: Overlapping, 
					number_of_writers: Nat, 
					next_value: Data, 
					readers: Set(TID), 
					writers: Set(TID));
    
map 
    INIT_Status_safe: RID -> Status_safe;

    start_reading: TID # Status_safe -> Status_safe;
    finish_reading: TID # Status_safe -> Status_safe;
    start_writing: TID # Data # Status_safe -> Status_safe;
    finish_writing: TID # Status_safe -> Status_safe;
    overlapping_write: TID # Status_safe -> Bool;
    
var
    tid: TID;
    rid: RID;
    o: Overlapping;
    w: Nat;
	rs, ws: Set(TID),
    d,d': Data;
eqn 
    INIT_Status_safe(rid) = status_safe(ALL_OVERLAPPING, 0, INIT(rid), {}, {});
    start_reading(tid,status_safe(o, w, d, rs, ws)) = 
        status_safe(o[tid -> w > 0], w, d, rs + {tid}, ws);
    finish_reading(tid,status_safe(o, w, d, rs, ws)) = 
        status_safe(o[tid -> true], w, d, rs - {tid}, ws);
    w == 0 -> start_writing(tid, d, status_safe(o, w, d', rs, ws)) = 
        status_safe(ALL_OVERLAPPING[tid -> false], w + 1, d, rs, ws + {tid});
    w > 0 -> start_writing(tid, d, status_safe(o, w, d', rs, ws)) = 
        status_safe(ALL_OVERLAPPING, w + 1, d, rs, ws + {tid});
    finish_writing(tid, status_safe(o, w, d, rs, ws)) = 
        status_safe(o[tid->true], Int2Nat(w-1), d, rs, ws - {tid});
    overlapping_write(tid, status_safe(o, w, d, rs, ws)) = o(tid);

proc
    Safe_Register(rid: RID) = Register_safe(rid,INIT(rid),INIT_Status_safe(rid));

    Register_safe(rid: RID, d: Data, s: Status_safe) =
          sum tid: TID. valid_tid(tid) -> (
			((!(tid in readers(s) || tid in writers(s))) -> (
            	( start_read_r(tid,rid).Register_safe(s=start_reading(tid, s)) )
            	+ ( sum d': Data. valid_data(d',rid) ->(
                	start_write_r(tid,rid,d').Register_safe(s=start_writing(tid, d', s)) ) )
			))
            + ( overlapping_write(tid, s) -> (
                sum d': Data. valid_data(d',rid) ->(
                     ((tid in readers(s)) -> finish_read_s(tid,rid,d').Register_safe(s=finish_reading(tid,s)))
                     + ((tid in writers(s)) -> finish_write_s(tid,rid).Register_safe(d=d', s=finish_writing(tid, s)) ) )
                ) <> ( 
					 ((tid in readers(s)) -> finish_read_s(tid,rid,d).Register_safe(s=finish_reading(tid, s)))
                     + ((tid in writers(s)) -> finish_write_s(tid,rid).Register_safe(d=next_value(s), s=finish_writing(tid, s)) ) ) ) );

%%%%%%%%%%%%%%%%%%%%%%%     
%% Regular registers %%
%%%%%%%%%%%%%%%%%%%%%%%
sort
    Possible_values = TID -> Set(Data);
map
    ALL_EMPTY: Possible_values;
    add_each: Data # Possible_values -> Possible_values;
    add_each_step: TID # Data # Possible_values -> Possible_values;
var
    tid: TID;
    pv: Possible_values;
    d: Data;
eqn
    ALL_EMPTY(tid) = {};
    add_each(d, pv) = add_each_step(MIN_TID, d, pv);
    (valid_tid(tid)) -> add_each_step(tid, d, pv) = add_each_step(tid + 1, d, pv[tid -> pv(tid) + {d}]);
    (!valid_tid(tid)) -> add_each_step(tid, d, pv) = pv;

sort
    Status_regular = struct status_regular(
						rpos: Possible_values, 
						wpending: Set(TID), 
						curvals: Bag(Data), 
						wvals: TID -> Data, 
						readers: Set(TID), 
						writers: Set(TID));


map
    INIT_Status_regular: Status_regular;
    
    start_reading: TID # Data # Status_regular -> Status_regular;
    finish_reading: TID # Status_regular -> Status_regular;
    read_pos_val: TID # Status_regular -> Set(Data);
    start_writing: TID # Data # Status_regular -> Status_regular;
    finish_writing: TID # Status_regular -> Status_regular;
    recent_writer: TID # Status_regular -> Status_regular;
    pending_writers: Status_regular -> Set(TID);
    write_value: TID # Status_regular -> Data;
    
var
    tid: TID;
    rid: RID;
    d, lv: Data;
    rp: Possible_values;
    wp: Set(TID);
    cv: Bag(Data);
    wv: TID -> Data;
	rs, ws: Set(TID);
        
eqn
    INIT_Status_regular = status_regular(ALL_EMPTY, {}, {:}, ALL_UNDEFINED, {}, {}); 
    
    start_reading(tid, d, status_regular(rp, wp, cv, wv, rs, ws)) =
        status_regular(rp[tid -> Bag2Set(cv) + {d}], wp, cv, wv, rs + {tid}, ws);
    finish_reading(tid, status_regular(rp, wp, cv, wv, rs, ws)) =
        status_regular(rp[tid -> {}], wp, cv, wv, rs - {tid}, ws);
    read_pos_val(tid, status_regular(rp, wp, cv, wv, rs, ws)) =
        rp(tid);
    start_writing(tid, d, status_regular(rp, wp, cv, wv, rs, ws)) =
        status_regular(add_each(d, rp), wp + {tid}, cv + {d:1}, wv[tid -> d], rs, ws + {tid});
    finish_writing(tid, status_regular(rp, wp, cv, wv, rs, ws)) =
        status_regular(rp, wp, cv - {wv(tid):1}, wv[tid -> UNDEFINED], rs, ws - {tid});
    recent_writer(tid, status_regular(rp, wp, cv, wv, rs, ws)) =
        status_regular(rp, wp - {tid}, cv, wv, rs, ws);
    pending_writers(status_regular(rp, wp, cv, wv, rs, ws)) = 
        wp;
    write_value(tid, status_regular(rp, wp, cv, wv, rs, ws)) =
        wv(tid);
    
proc
    Regular_Register(rid: RID) = Register_regular(rid,INIT(rid), INIT_Status_regular);

    Register_regular(rid: RID, d: Data, s: Status_regular) =
    	sum tid: TID. valid_tid(tid) -> (
		(!(tid in readers(s) || tid in writers(s)) -> (
        	( start_read_r(tid, rid).Register_regular(s=start_reading(tid, d, s)))
        	+ ( sum d': Data. valid_data(d', rid) ->
            	( start_write_r(tid, rid, d').Register_regular(s=start_writing(tid, d', s)) ) ) ))
        + ((tid in readers(s)) -> ( sum d': Data. (d' in read_pos_val(tid, s)) ->
            ( finish_read_s(tid, rid, d').Register_regular(s=finish_reading(tid, s)) ) ))
        + ( (tid in pending_writers(s)) ->
            ( order_write(tid,rid).Register_regular(d=write_value(tid, s), s=recent_writer(tid, s)) ) )
        + ( (tid in writers(s) && !(tid in pending_writers(s))) ->
            ( finish_write_s(tid, rid).Register_regular(s=finish_writing(tid, s)) ) ) )
    ;

%%%%%%%%%%%%%%%%%%%%%%
%% Atomic Registers %%
%%%%%%%%%%%%%%%%%%%%%%
sort
    Status_atomic = struct status_atomic(
						vals:TID->Data, 
						readers:Set(TID), 
						writers:Set(TID));
    
map 
    INIT_Status_atomic: RID -> Status_atomic;

    ALL_UNDEFINED: TID -> Data;

    start_reading: TID # Status_atomic -> Status_atomic;
    store_rval: TID # Data # Status_atomic -> Status_atomic;
    finish_reading: TID # Status_atomic -> Status_atomic;
    start_writing: TID # Data # Status_atomic -> Status_atomic;
    finish_writing: TID # Status_atomic -> Status_atomic;
    remove_wval: TID # Status_atomic -> Status_atomic;
    
var
    tid: TID;
    rid: RID;
    w: Nat;
    cr,cw: Set(TID);
    v: TID->Data;
    d: Data;
eqn 
    INIT_Status_atomic(rid) = status_atomic(ALL_UNDEFINED,{},{});

    ALL_UNDEFINED(tid) = UNDEFINED;
        
    start_reading(tid,status_atomic(v,cr,cw)) = 
        status_atomic(v, cr+{tid},cw);
    store_rval(tid,d,status_atomic(v,cr,cw)) =
            status_atomic(v[tid->d],cr,cw);
    finish_reading(tid,status_atomic(v,cr,cw)) = 
        status_atomic(v[tid->UNDEFINED],cr-{tid}, cw);
    start_writing(tid, d, status_atomic(v,cr,cw)) = 
        status_atomic(v[tid->d],cr,cw+{tid});
    finish_writing(tid, status_atomic(v,cr,cw)) = 
        status_atomic(v[tid->UNDEFINED],cr,cw-{tid});
    remove_wval(tid,status_atomic(v,cr,cw)) =
        status_atomic(v[tid->UNDEFINED],cr,cw);

proc
    Atomic_Register(rid: RID) = Register_atomic(rid,INIT(rid),INIT_Status_atomic(rid));

    Register_atomic(rid: RID, d: Data, s: Status_atomic) =
    	sum tid: TID. valid_tid(tid) -> (
      ( (!(tid in readers(s) || tid in writers(s))) ->
              (start_read_r(tid,rid).Register_atomic(s=start_reading(tid, s))))
        + ( (!(tid in writers(s) || tid in writers(s))) -> (
                  sum d': Data. valid_data(d',rid) ->
          ( start_write_r(tid,rid,d').Register_atomic(s=start_writing(tid, d', s)) ) ) )
        + ( (tid in readers(s) && (vals(s)(tid) == UNDEFINED)) ->
          exec_read(tid,rid).Register_atomic(s=store_rval(tid,d,s)) )
        + ( (tid in writers(s) && vals(s)(tid) != UNDEFINED) ->
            exec_write(tid,rid).Register_atomic(d=vals(s)(tid), s=remove_wval(tid,s)) )
        + ( (tid in readers(s) && vals(s)(tid) != UNDEFINED) ->
              finish_read_s(tid,rid,vals(s)(tid)).Register_atomic(s=finish_reading(tid,s)) )
        + ( (tid in writers(s) && vals(s)(tid) == UNDEFINED) ->
              finish_write_s(tid,rid).Register_atomic(s=finish_writing(tid,s)) ) )
    ;

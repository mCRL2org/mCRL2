% N Gossiping girls

% Note: when changing Gossips, change the init process accordingly!
map N: Nat;
    Gossips: List(Pos);
eqn Gossips = [1,2,3,4,5,6];
    N = #Gossips;

map merge: List(Pos) # List(Pos) -> List(Pos);
    add: Pos # List(Pos) -> List(Pos);
var l,l': List(Pos);
    p,p': Pos;
eqn merge([],l) = l;
    merge(l,[]) = l;
    (p <  p') -> merge(p |> l,p' |> l') = p  |> merge(l,p' |> l');
    (p >  p') -> merge(p |> l,p' |> l') = p' |> merge(p |> l,l');
    (p == p') -> merge(p |> l,p' |> l') = p' |> merge(l,l');
%    merge(p |> l',l) = merge(l',add(p,l));
%    add(p,[]) = [p];
%    (p <  p') -> add(p,p' |> l) = p  |> p' |> l;
%    (p == p') -> add(p,p' |> l) = p  |> l;
%    (p >  p') -> add(p,p' |> l) = p' |> add(p,l);

act done,all_done;
    call,answer,approve,exchange: Pos # Pos # List(Pos) # List(Pos);

proc Girl(id:Pos,knowledge:List(Pos)) =
       sum i:Pos, s:List(Pos) . (
         (s != knowledge) ->
           (call(id,i,knowledge,s) + answer(i,id,s,knowledge)) 
             . Girl(id,merge(knowledge,s))
       )
       +
       (knowledge == Gossips) -> done . Girl(id,knowledge);

proc Referee(p:Pos) =
       (p == 1) -> sum l,l':List(Pos) . approve(1,2,l,l')  . Referee(p+1)
     + (p == 2) -> sum l,l':List(Pos) . (approve(1,3,l,l') + approve(3,4,l,l')) . Referee(p+1)
     + (p == 3) -> sum l,l':List(Pos), q,r:Pos . approve(q,r,l,l') . Referee(p);

proc Girl_init(id:Pos) = Girl(id,[id]);

init allow({exchange,all_done},
     comm({call|answer|approve -> exchange,
     done|done|done|done|done|done->all_done},
       Girl_init(1) || Girl_init(2) || Girl_init(3) || 
       Girl_init(4) || Girl_init(5) || Girl_init(6) || Referee(1)
     ));
